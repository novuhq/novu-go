// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type AllType string

const (
	AllTypeWorkflowPreferenceDto AllType = "WorkflowPreferenceDto"
)

// All - A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
type All struct {
	WorkflowPreferenceDto *WorkflowPreferenceDto `queryParam:"inline,name=all"`

	Type AllType
}

func CreateAllWorkflowPreferenceDto(workflowPreferenceDto WorkflowPreferenceDto) All {
	typ := AllTypeWorkflowPreferenceDto

	return All{
		WorkflowPreferenceDto: &workflowPreferenceDto,
		Type:                  typ,
	}
}

func (u *All) UnmarshalJSON(data []byte) error {

	var workflowPreferenceDto WorkflowPreferenceDto = WorkflowPreferenceDto{}
	if err := utils.UnmarshalJSON(data, &workflowPreferenceDto, "", true, nil); err == nil {
		u.WorkflowPreferenceDto = &workflowPreferenceDto
		u.Type = AllTypeWorkflowPreferenceDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for All", string(data))
}

func (u All) MarshalJSON() ([]byte, error) {
	if u.WorkflowPreferenceDto != nil {
		return utils.MarshalJSON(u.WorkflowPreferenceDto, "", true)
	}

	return nil, errors.New("could not marshal union type All: all fields are null")
}

type WorkflowPreferencesDto struct {
	// A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
	All All `json:"all"`
	// Preferences for different communication channels
	Channels map[string]ChannelPreferenceDto `json:"channels"`
}

func (w *WorkflowPreferencesDto) GetAll() All {
	if w == nil {
		return All{}
	}
	return w.All
}

func (w *WorkflowPreferencesDto) GetChannels() map[string]ChannelPreferenceDto {
	if w == nil {
		return map[string]ChannelPreferenceDto{}
	}
	return w.Channels
}
