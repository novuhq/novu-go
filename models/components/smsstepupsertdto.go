// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type SmsStepUpsertDtoControlValuesType string

const (
	SmsStepUpsertDtoControlValuesTypeSmsControlDto SmsStepUpsertDtoControlValuesType = "SmsControlDto"
	SmsStepUpsertDtoControlValuesTypeMapOfAny      SmsStepUpsertDtoControlValuesType = "mapOfAny"
)

// SmsStepUpsertDtoControlValues - Control values for the SMS step.
type SmsStepUpsertDtoControlValues struct {
	SmsControlDto *SmsControlDto `queryParam:"inline" name:"controlValues"`
	MapOfAny      map[string]any `queryParam:"inline" name:"controlValues"`

	Type SmsStepUpsertDtoControlValuesType
}

func CreateSmsStepUpsertDtoControlValuesSmsControlDto(smsControlDto SmsControlDto) SmsStepUpsertDtoControlValues {
	typ := SmsStepUpsertDtoControlValuesTypeSmsControlDto

	return SmsStepUpsertDtoControlValues{
		SmsControlDto: &smsControlDto,
		Type:          typ,
	}
}

func CreateSmsStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) SmsStepUpsertDtoControlValues {
	typ := SmsStepUpsertDtoControlValuesTypeMapOfAny

	return SmsStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *SmsStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var smsControlDto SmsControlDto = SmsControlDto{}
	if err := utils.UnmarshalJSON(data, &smsControlDto, "", true, nil); err == nil {
		u.SmsControlDto = &smsControlDto
		u.Type = SmsStepUpsertDtoControlValuesTypeSmsControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = SmsStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SmsStepUpsertDtoControlValues", string(data))
}

func (u SmsStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.SmsControlDto != nil {
		return utils.MarshalJSON(u.SmsControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type SmsStepUpsertDtoControlValues: all fields are null")
}

type SmsStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the SMS step.
	ControlValues *SmsStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (s SmsStepUpsertDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SmsStepUpsertDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *SmsStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SmsStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SmsStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *SmsStepUpsertDto) GetControlValues() *SmsStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
