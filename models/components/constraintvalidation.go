// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type FiveType string

const (
	FiveTypeStr      FiveType = "str"
	FiveTypeNumber   FiveType = "number"
	FiveTypeBoolean  FiveType = "boolean"
	FiveTypeMapOfAny FiveType = "mapOfAny"
)

type Five struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type FiveType
}

func CreateFiveStr(str string) Five {
	typ := FiveTypeStr

	return Five{
		Str:  &str,
		Type: typ,
	}
}

func CreateFiveNumber(number float64) Five {
	typ := FiveTypeNumber

	return Five{
		Number: &number,
		Type:   typ,
	}
}

func CreateFiveBoolean(boolean bool) Five {
	typ := FiveTypeBoolean

	return Five{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateFiveMapOfAny(mapOfAny map[string]any) Five {
	typ := FiveTypeMapOfAny

	return Five{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *Five) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = FiveTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = FiveTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = FiveTypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = FiveTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Five", string(data))
}

func (u Five) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Five: all fields are null")
}

type Four struct {
}

type ValueType string

const (
	ValueTypeStr      ValueType = "str"
	ValueTypeNumber   ValueType = "number"
	ValueTypeBoolean  ValueType = "boolean"
	ValueTypeFour     ValueType = "4"
	ValueTypeArrayOf5 ValueType = "arrayOf5"
)

// Value that failed validation
type Value struct {
	Str      *string  `queryParam:"inline"`
	Number   *float64 `queryParam:"inline"`
	Boolean  *bool    `queryParam:"inline"`
	Four     *Four    `queryParam:"inline"`
	ArrayOf5 []*Five  `queryParam:"inline"`

	Type ValueType
}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueNumber(number float64) Value {
	typ := ValueTypeNumber

	return Value{
		Number: &number,
		Type:   typ,
	}
}

func CreateValueBoolean(boolean bool) Value {
	typ := ValueTypeBoolean

	return Value{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValueFour(four Four) Value {
	typ := ValueTypeFour

	return Value{
		Four: &four,
		Type: typ,
	}
}

func CreateValueArrayOf5(arrayOf5 []*Five) Value {
	typ := ValueTypeArrayOf5

	return Value{
		ArrayOf5: arrayOf5,
		Type:     typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	var four Four = Four{}
	if err := utils.UnmarshalJSON(data, &four, "", true, true); err == nil {
		u.Four = &four
		u.Type = ValueTypeFour
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ValueTypeBoolean
		return nil
	}

	var arrayOf5 []*Five = []*Five{}
	if err := utils.UnmarshalJSON(data, &arrayOf5, "", true, true); err == nil {
		u.ArrayOf5 = arrayOf5
		u.Type = ValueTypeArrayOf5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value", string(data))
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Four != nil {
		return utils.MarshalJSON(u.Four, "", true)
	}

	if u.ArrayOf5 != nil {
		return utils.MarshalJSON(u.ArrayOf5, "", true)
	}

	return nil, errors.New("could not marshal union type Value: all fields are null")
}

type ConstraintValidation struct {
	// List of validation error messages
	Messages []string `json:"messages"`
	// Value that failed validation
	Value *Value `json:"value,omitempty"`
}

func (o *ConstraintValidation) GetMessages() []string {
	if o == nil {
		return []string{}
	}
	return o.Messages
}

func (o *ConstraintValidation) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}
