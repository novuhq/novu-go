// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ActivityNotificationJobResponseDtoType - Type of the job
type ActivityNotificationJobResponseDtoType string

const (
	ActivityNotificationJobResponseDtoTypeInApp    ActivityNotificationJobResponseDtoType = "in_app"
	ActivityNotificationJobResponseDtoTypeEmail    ActivityNotificationJobResponseDtoType = "email"
	ActivityNotificationJobResponseDtoTypeSms      ActivityNotificationJobResponseDtoType = "sms"
	ActivityNotificationJobResponseDtoTypeChat     ActivityNotificationJobResponseDtoType = "chat"
	ActivityNotificationJobResponseDtoTypePush     ActivityNotificationJobResponseDtoType = "push"
	ActivityNotificationJobResponseDtoTypeDigest   ActivityNotificationJobResponseDtoType = "digest"
	ActivityNotificationJobResponseDtoTypeTrigger  ActivityNotificationJobResponseDtoType = "trigger"
	ActivityNotificationJobResponseDtoTypeDelay    ActivityNotificationJobResponseDtoType = "delay"
	ActivityNotificationJobResponseDtoTypeThrottle ActivityNotificationJobResponseDtoType = "throttle"
	ActivityNotificationJobResponseDtoTypeCustom   ActivityNotificationJobResponseDtoType = "custom"
)

func (e ActivityNotificationJobResponseDtoType) ToPointer() *ActivityNotificationJobResponseDtoType {
	return &e
}
func (e *ActivityNotificationJobResponseDtoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_app":
		fallthrough
	case "email":
		fallthrough
	case "sms":
		fallthrough
	case "chat":
		fallthrough
	case "push":
		fallthrough
	case "digest":
		fallthrough
	case "trigger":
		fallthrough
	case "delay":
		fallthrough
	case "throttle":
		fallthrough
	case "custom":
		*e = ActivityNotificationJobResponseDtoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityNotificationJobResponseDtoType: %v", v)
	}
}

// ActivityNotificationJobResponseDtoPayload - Optional payload for the job
type ActivityNotificationJobResponseDtoPayload struct {
}

type ActivityNotificationJobResponseDto struct {
	// Unique identifier of the job
	ID string `json:"_id"`
	// Type of the job
	Type ActivityNotificationJobResponseDtoType `json:"type"`
	// Optional digest for the job, including metadata and events
	Digest *DigestMetadataDto `json:"digest,omitempty"`
	// Execution details of the job
	ExecutionDetails []ActivityNotificationExecutionDetailResponseDto `json:"executionDetails"`
	// Step details of the job
	Step ActivityNotificationStepResponseDto `json:"step"`
	// Optional context object for additional error details.
	Overrides map[string]any `json:"overrides,omitempty"`
	// Optional payload for the job
	Payload *ActivityNotificationJobResponseDtoPayload `json:"payload,omitempty"`
	// Provider ID of the job
	ProviderID ProvidersIDEnum `json:"providerId"`
	// Status of the job
	Status string `json:"status"`
	// Updated time of the notification
	UpdatedAt *string `json:"updatedAt,omitempty"`
	// The number of times the digest/delay job has been extended to align with the subscribers schedule
	ScheduleExtensionsCount *float64 `json:"scheduleExtensionsCount,omitempty"`
}

func (a *ActivityNotificationJobResponseDto) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *ActivityNotificationJobResponseDto) GetType() ActivityNotificationJobResponseDtoType {
	if a == nil {
		return ActivityNotificationJobResponseDtoType("")
	}
	return a.Type
}

func (a *ActivityNotificationJobResponseDto) GetDigest() *DigestMetadataDto {
	if a == nil {
		return nil
	}
	return a.Digest
}

func (a *ActivityNotificationJobResponseDto) GetExecutionDetails() []ActivityNotificationExecutionDetailResponseDto {
	if a == nil {
		return []ActivityNotificationExecutionDetailResponseDto{}
	}
	return a.ExecutionDetails
}

func (a *ActivityNotificationJobResponseDto) GetStep() ActivityNotificationStepResponseDto {
	if a == nil {
		return ActivityNotificationStepResponseDto{}
	}
	return a.Step
}

func (a *ActivityNotificationJobResponseDto) GetOverrides() map[string]any {
	if a == nil {
		return nil
	}
	return a.Overrides
}

func (a *ActivityNotificationJobResponseDto) GetPayload() *ActivityNotificationJobResponseDtoPayload {
	if a == nil {
		return nil
	}
	return a.Payload
}

func (a *ActivityNotificationJobResponseDto) GetProviderID() ProvidersIDEnum {
	if a == nil {
		return ProvidersIDEnum("")
	}
	return a.ProviderID
}

func (a *ActivityNotificationJobResponseDto) GetStatus() string {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *ActivityNotificationJobResponseDto) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActivityNotificationJobResponseDto) GetScheduleExtensionsCount() *float64 {
	if a == nil {
		return nil
	}
	return a.ScheduleExtensionsCount
}
