// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type ChatStepUpsertDtoControlValuesType string

const (
	ChatStepUpsertDtoControlValuesTypeChatControlDto ChatStepUpsertDtoControlValuesType = "ChatControlDto"
	ChatStepUpsertDtoControlValuesTypeMapOfAny       ChatStepUpsertDtoControlValuesType = "mapOfAny"
)

// ChatStepUpsertDtoControlValues - Control values for the Chat step.
type ChatStepUpsertDtoControlValues struct {
	ChatControlDto *ChatControlDto `queryParam:"inline" name:"controlValues"`
	MapOfAny       map[string]any  `queryParam:"inline" name:"controlValues"`

	Type ChatStepUpsertDtoControlValuesType
}

func CreateChatStepUpsertDtoControlValuesChatControlDto(chatControlDto ChatControlDto) ChatStepUpsertDtoControlValues {
	typ := ChatStepUpsertDtoControlValuesTypeChatControlDto

	return ChatStepUpsertDtoControlValues{
		ChatControlDto: &chatControlDto,
		Type:           typ,
	}
}

func CreateChatStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) ChatStepUpsertDtoControlValues {
	typ := ChatStepUpsertDtoControlValuesTypeMapOfAny

	return ChatStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *ChatStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var chatControlDto ChatControlDto = ChatControlDto{}
	if err := utils.UnmarshalJSON(data, &chatControlDto, "", true, nil); err == nil {
		u.ChatControlDto = &chatControlDto
		u.Type = ChatStepUpsertDtoControlValuesTypeChatControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ChatStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChatStepUpsertDtoControlValues", string(data))
}

func (u ChatStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.ChatControlDto != nil {
		return utils.MarshalJSON(u.ChatControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type ChatStepUpsertDtoControlValues: all fields are null")
}

type ChatStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Chat step.
	ControlValues *ChatStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (c ChatStepUpsertDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatStepUpsertDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *ChatStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ChatStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ChatStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *ChatStepUpsertDto) GetControlValues() *ChatStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
