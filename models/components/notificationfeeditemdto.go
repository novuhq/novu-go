// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
	"time"
)

// NotificationFeedItemDtoStatus - Current status of the notification.
type NotificationFeedItemDtoStatus string

const (
	NotificationFeedItemDtoStatusSent    NotificationFeedItemDtoStatus = "sent"
	NotificationFeedItemDtoStatusError   NotificationFeedItemDtoStatus = "error"
	NotificationFeedItemDtoStatusWarning NotificationFeedItemDtoStatus = "warning"
)

func (e NotificationFeedItemDtoStatus) ToPointer() *NotificationFeedItemDtoStatus {
	return &e
}
func (e *NotificationFeedItemDtoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sent":
		fallthrough
	case "error":
		fallthrough
	case "warning":
		*e = NotificationFeedItemDtoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationFeedItemDtoStatus: %v", v)
	}
}

type NotificationFeedItemDto struct {
	// Unique identifier for the notification.
	ID string `json:"_id"`
	// Identifier for the template used to generate the notification.
	TemplateID string `json:"_templateId"`
	// Identifier for the environment where the notification is sent.
	EnvironmentID string `json:"_environmentId"`
	// Identifier for the message template used.
	MessageTemplateID *string `json:"_messageTemplateId,omitempty"`
	// Identifier for the organization sending the notification.
	OrganizationID string `json:"_organizationId"`
	// Unique identifier for the notification instance.
	NotificationID string `json:"_notificationId"`
	// Unique identifier for the subscriber receiving the notification.
	SubscriberID string `json:"_subscriberId"`
	// Identifier for the feed associated with the notification.
	FeedID *string `json:"_feedId,omitempty"`
	// Identifier for the job that triggered the notification.
	JobID string `json:"_jobId"`
	// Timestamp indicating when the notification was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Timestamp indicating when the notification was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Actor details related to the notification, if applicable.
	Actor *ActorFeedItemDto `json:"actor,omitempty"`
	// Subscriber details associated with this notification.
	Subscriber *SubscriberFeedResponseDto `json:"subscriber,omitempty"`
	// Unique identifier for the transaction associated with the notification.
	TransactionID string `json:"transactionId"`
	// Identifier for the template used, if applicable.
	TemplateIdentifier *string `json:"templateIdentifier,omitempty"`
	// Identifier for the provider that sends the notification.
	ProviderID *string `json:"providerId,omitempty"`
	// The main content of the notification.
	Content string `json:"content"`
	// The subject line for email notifications, if applicable.
	Subject *string `json:"subject,omitempty"`
	// Channel type through which the message is sent
	Channel ChannelTypeEnum `json:"channel"`
	// Indicates whether the notification has been read by the subscriber.
	Read bool `json:"read"`
	// Indicates whether the notification has been seen by the subscriber.
	Seen bool `json:"seen"`
	// Device tokens for push notifications, if applicable.
	DeviceTokens []string `json:"deviceTokens,omitempty"`
	// Call-to-action information associated with the notification.
	Cta MessageCTA `json:"cta"`
	// Current status of the notification.
	Status NotificationFeedItemDtoStatus `json:"status"`
	// The payload that was used to send the notification trigger.
	Payload map[string]any `json:"payload,omitempty"`
	// Provider-specific overrides used when triggering the notification.
	Overrides map[string]any `json:"overrides,omitempty"`
}

func (n NotificationFeedItemDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NotificationFeedItemDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NotificationFeedItemDto) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NotificationFeedItemDto) GetTemplateID() string {
	if o == nil {
		return ""
	}
	return o.TemplateID
}

func (o *NotificationFeedItemDto) GetEnvironmentID() string {
	if o == nil {
		return ""
	}
	return o.EnvironmentID
}

func (o *NotificationFeedItemDto) GetMessageTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.MessageTemplateID
}

func (o *NotificationFeedItemDto) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *NotificationFeedItemDto) GetNotificationID() string {
	if o == nil {
		return ""
	}
	return o.NotificationID
}

func (o *NotificationFeedItemDto) GetSubscriberID() string {
	if o == nil {
		return ""
	}
	return o.SubscriberID
}

func (o *NotificationFeedItemDto) GetFeedID() *string {
	if o == nil {
		return nil
	}
	return o.FeedID
}

func (o *NotificationFeedItemDto) GetJobID() string {
	if o == nil {
		return ""
	}
	return o.JobID
}

func (o *NotificationFeedItemDto) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *NotificationFeedItemDto) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *NotificationFeedItemDto) GetActor() *ActorFeedItemDto {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *NotificationFeedItemDto) GetSubscriber() *SubscriberFeedResponseDto {
	if o == nil {
		return nil
	}
	return o.Subscriber
}

func (o *NotificationFeedItemDto) GetTransactionID() string {
	if o == nil {
		return ""
	}
	return o.TransactionID
}

func (o *NotificationFeedItemDto) GetTemplateIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.TemplateIdentifier
}

func (o *NotificationFeedItemDto) GetProviderID() *string {
	if o == nil {
		return nil
	}
	return o.ProviderID
}

func (o *NotificationFeedItemDto) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *NotificationFeedItemDto) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *NotificationFeedItemDto) GetChannel() ChannelTypeEnum {
	if o == nil {
		return ChannelTypeEnum("")
	}
	return o.Channel
}

func (o *NotificationFeedItemDto) GetRead() bool {
	if o == nil {
		return false
	}
	return o.Read
}

func (o *NotificationFeedItemDto) GetSeen() bool {
	if o == nil {
		return false
	}
	return o.Seen
}

func (o *NotificationFeedItemDto) GetDeviceTokens() []string {
	if o == nil {
		return nil
	}
	return o.DeviceTokens
}

func (o *NotificationFeedItemDto) GetCta() MessageCTA {
	if o == nil {
		return MessageCTA{}
	}
	return o.Cta
}

func (o *NotificationFeedItemDto) GetStatus() NotificationFeedItemDtoStatus {
	if o == nil {
		return NotificationFeedItemDtoStatus("")
	}
	return o.Status
}

func (o *NotificationFeedItemDto) GetPayload() map[string]any {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *NotificationFeedItemDto) GetOverrides() map[string]any {
	if o == nil {
		return nil
	}
	return o.Overrides
}
