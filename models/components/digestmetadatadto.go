// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Unit of the digest
type Unit string

const (
	UnitSeconds Unit = "seconds"
	UnitMinutes Unit = "minutes"
	UnitHours   Unit = "hours"
	UnitDays    Unit = "days"
	UnitWeeks   Unit = "weeks"
	UnitMonths  Unit = "months"
)

func (e Unit) ToPointer() *Unit {
	return &e
}
func (e *Unit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = Unit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Unit: %v", v)
	}
}

type DigestMetadataDto struct {
	// Optional key for the digest
	DigestKey *string `json:"digestKey,omitempty"`
	// Amount for the digest
	Amount *float64 `json:"amount,omitempty"`
	// Unit of the digest
	Unit *Unit `json:"unit,omitempty"`
	// The Digest Type
	Type DigestTypeEnum `json:"type"`
	// Optional array of events associated with the digest, represented as key-value pairs
	Events []map[string]any `json:"events,omitempty"`
	// Regular digest: Indicates if backoff is enabled for the regular digest
	Backoff *bool `json:"backoff,omitempty"`
	// Regular digest: Amount for backoff
	BackoffAmount *float64 `json:"backoffAmount,omitempty"`
	// Regular digest: Unit for backoff
	BackoffUnit *DigestUnitEnum `json:"backoffUnit,omitempty"`
	// Regular digest: Indicates if the digest should update
	UpdateMode *bool `json:"updateMode,omitempty"`
	// Configuration for timed digest
	Timed *DigestTimedConfigDto `json:"timed,omitempty"`
}

func (o *DigestMetadataDto) GetDigestKey() *string {
	if o == nil {
		return nil
	}
	return o.DigestKey
}

func (o *DigestMetadataDto) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *DigestMetadataDto) GetUnit() *Unit {
	if o == nil {
		return nil
	}
	return o.Unit
}

func (o *DigestMetadataDto) GetType() DigestTypeEnum {
	if o == nil {
		return DigestTypeEnum("")
	}
	return o.Type
}

func (o *DigestMetadataDto) GetEvents() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *DigestMetadataDto) GetBackoff() *bool {
	if o == nil {
		return nil
	}
	return o.Backoff
}

func (o *DigestMetadataDto) GetBackoffAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffAmount
}

func (o *DigestMetadataDto) GetBackoffUnit() *DigestUnitEnum {
	if o == nil {
		return nil
	}
	return o.BackoffUnit
}

func (o *DigestMetadataDto) GetUpdateMode() *bool {
	if o == nil {
		return nil
	}
	return o.UpdateMode
}

func (o *DigestMetadataDto) GetTimed() *DigestTimedConfigDto {
	if o == nil {
		return nil
	}
	return o.Timed
}
