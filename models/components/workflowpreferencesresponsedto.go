// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type WorkflowPreferencesResponseDtoAllType string

const (
	WorkflowPreferencesResponseDtoAllTypeWorkflowPreferenceDto WorkflowPreferencesResponseDtoAllType = "WorkflowPreferenceDto"
)

// WorkflowPreferencesResponseDtoAll - A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
type WorkflowPreferencesResponseDtoAll struct {
	WorkflowPreferenceDto *WorkflowPreferenceDto `queryParam:"inline,name=all"`

	Type WorkflowPreferencesResponseDtoAllType
}

func CreateWorkflowPreferencesResponseDtoAllWorkflowPreferenceDto(workflowPreferenceDto WorkflowPreferenceDto) WorkflowPreferencesResponseDtoAll {
	typ := WorkflowPreferencesResponseDtoAllTypeWorkflowPreferenceDto

	return WorkflowPreferencesResponseDtoAll{
		WorkflowPreferenceDto: &workflowPreferenceDto,
		Type:                  typ,
	}
}

func (u *WorkflowPreferencesResponseDtoAll) UnmarshalJSON(data []byte) error {

	var workflowPreferenceDto WorkflowPreferenceDto = WorkflowPreferenceDto{}
	if err := utils.UnmarshalJSON(data, &workflowPreferenceDto, "", true, nil); err == nil {
		u.WorkflowPreferenceDto = &workflowPreferenceDto
		u.Type = WorkflowPreferencesResponseDtoAllTypeWorkflowPreferenceDto
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WorkflowPreferencesResponseDtoAll", string(data))
}

func (u WorkflowPreferencesResponseDtoAll) MarshalJSON() ([]byte, error) {
	if u.WorkflowPreferenceDto != nil {
		return utils.MarshalJSON(u.WorkflowPreferenceDto, "", true)
	}

	return nil, errors.New("could not marshal union type WorkflowPreferencesResponseDtoAll: all fields are null")
}

// WorkflowPreferencesResponseDtoUser - User-specific workflow preferences
type WorkflowPreferencesResponseDtoUser struct {
	// A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
	All WorkflowPreferencesResponseDtoAll `json:"all"`
	// Preferences for different communication channels
	Channels map[string]ChannelPreferenceDto `json:"channels"`
}

func (w *WorkflowPreferencesResponseDtoUser) GetAll() WorkflowPreferencesResponseDtoAll {
	if w == nil {
		return WorkflowPreferencesResponseDtoAll{}
	}
	return w.All
}

func (w *WorkflowPreferencesResponseDtoUser) GetChannels() map[string]ChannelPreferenceDto {
	if w == nil {
		return map[string]ChannelPreferenceDto{}
	}
	return w.Channels
}

type WorkflowPreferencesResponseDto struct {
	// User-specific workflow preferences
	User *WorkflowPreferencesResponseDtoUser `json:"user,omitempty"`
	// Default workflow preferences
	Default WorkflowPreferencesDto `json:"default"`
}

func (w *WorkflowPreferencesResponseDto) GetUser() *WorkflowPreferencesResponseDtoUser {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WorkflowPreferencesResponseDto) GetDefault() WorkflowPreferencesDto {
	if w == nil {
		return WorkflowPreferencesDto{}
	}
	return w.Default
}
