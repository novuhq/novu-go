// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CreateIntegrationRequestDtoChannel - The channel type for the integration
type CreateIntegrationRequestDtoChannel string

const (
	CreateIntegrationRequestDtoChannelInApp CreateIntegrationRequestDtoChannel = "in_app"
	CreateIntegrationRequestDtoChannelEmail CreateIntegrationRequestDtoChannel = "email"
	CreateIntegrationRequestDtoChannelSms   CreateIntegrationRequestDtoChannel = "sms"
	CreateIntegrationRequestDtoChannelChat  CreateIntegrationRequestDtoChannel = "chat"
	CreateIntegrationRequestDtoChannelPush  CreateIntegrationRequestDtoChannel = "push"
)

func (e CreateIntegrationRequestDtoChannel) ToPointer() *CreateIntegrationRequestDtoChannel {
	return &e
}
func (e *CreateIntegrationRequestDtoChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_app":
		fallthrough
	case "email":
		fallthrough
	case "sms":
		fallthrough
	case "chat":
		fallthrough
	case "push":
		*e = CreateIntegrationRequestDtoChannel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateIntegrationRequestDtoChannel: %v", v)
	}
}

type CreateIntegrationRequestDto struct {
	// The name of the integration
	Name *string `json:"name,omitempty"`
	// The unique identifier for the integration
	Identifier *string `json:"identifier,omitempty"`
	// The ID of the associated environment
	EnvironmentID *string `json:"_environmentId,omitempty"`
	// The provider ID for the integration
	ProviderID string `json:"providerId"`
	// The channel type for the integration
	Channel CreateIntegrationRequestDtoChannel `json:"channel"`
	// The credentials for the integration
	Credentials *CredentialsDto `json:"credentials,omitempty"`
	// If the integration is active, the validation on the credentials field will run
	Active *bool `json:"active,omitempty"`
	// Flag to check the integration status
	Check *bool `json:"check,omitempty"`
	// Conditions for the integration
	Conditions []StepFilterDto `json:"conditions,omitempty"`
}

func (o *CreateIntegrationRequestDto) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateIntegrationRequestDto) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *CreateIntegrationRequestDto) GetEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.EnvironmentID
}

func (o *CreateIntegrationRequestDto) GetProviderID() string {
	if o == nil {
		return ""
	}
	return o.ProviderID
}

func (o *CreateIntegrationRequestDto) GetChannel() CreateIntegrationRequestDtoChannel {
	if o == nil {
		return CreateIntegrationRequestDtoChannel("")
	}
	return o.Channel
}

func (o *CreateIntegrationRequestDto) GetCredentials() *CredentialsDto {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *CreateIntegrationRequestDto) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *CreateIntegrationRequestDto) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CreateIntegrationRequestDto) GetConditions() []StepFilterDto {
	if o == nil {
		return nil
	}
	return o.Conditions
}
