// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type IssueType string

const (
	IssueTypeMissingValue            IssueType = "MISSING_VALUE"
	IssueTypeMaxLengthAccessed       IssueType = "MAX_LENGTH_ACCESSED"
	IssueTypeWorkflowIDAlreadyExists IssueType = "WORKFLOW_ID_ALREADY_EXISTS"
	IssueTypeDuplicatedValue         IssueType = "DUPLICATED_VALUE"
	IssueTypeLimitReached            IssueType = "LIMIT_REACHED"
)

func (e IssueType) ToPointer() *IssueType {
	return &e
}
func (e *IssueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISSING_VALUE":
		fallthrough
	case "MAX_LENGTH_ACCESSED":
		fallthrough
	case "WORKFLOW_ID_ALREADY_EXISTS":
		fallthrough
	case "DUPLICATED_VALUE":
		fallthrough
	case "LIMIT_REACHED":
		*e = IssueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssueType: %v", v)
	}
}

type RuntimeIssueDto struct {
	IssueType    IssueType `json:"issueType"`
	VariableName *string   `json:"variableName,omitempty"`
	Message      string    `json:"message"`
}

func (r *RuntimeIssueDto) GetIssueType() IssueType {
	if r == nil {
		return IssueType("")
	}
	return r.IssueType
}

func (r *RuntimeIssueDto) GetVariableName() *string {
	if r == nil {
		return nil
	}
	return r.VariableName
}

func (r *RuntimeIssueDto) GetMessage() string {
	if r == nil {
		return ""
	}
	return r.Message
}
