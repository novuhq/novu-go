// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// SubscriberChannelDtoProviderID - The ID of the chat or push provider.
type SubscriberChannelDtoProviderID string

const (
	SubscriberChannelDtoProviderIDSlack            SubscriberChannelDtoProviderID = "slack"
	SubscriberChannelDtoProviderIDDiscord          SubscriberChannelDtoProviderID = "discord"
	SubscriberChannelDtoProviderIDMsteams          SubscriberChannelDtoProviderID = "msteams"
	SubscriberChannelDtoProviderIDMattermost       SubscriberChannelDtoProviderID = "mattermost"
	SubscriberChannelDtoProviderIDRyver            SubscriberChannelDtoProviderID = "ryver"
	SubscriberChannelDtoProviderIDZulip            SubscriberChannelDtoProviderID = "zulip"
	SubscriberChannelDtoProviderIDGrafanaOnCall    SubscriberChannelDtoProviderID = "grafana-on-call"
	SubscriberChannelDtoProviderIDGetstream        SubscriberChannelDtoProviderID = "getstream"
	SubscriberChannelDtoProviderIDRocketChat       SubscriberChannelDtoProviderID = "rocket-chat"
	SubscriberChannelDtoProviderIDWhatsappBusiness SubscriberChannelDtoProviderID = "whatsapp-business"
	SubscriberChannelDtoProviderIDFcm              SubscriberChannelDtoProviderID = "fcm"
	SubscriberChannelDtoProviderIDApns             SubscriberChannelDtoProviderID = "apns"
	SubscriberChannelDtoProviderIDExpo             SubscriberChannelDtoProviderID = "expo"
	SubscriberChannelDtoProviderIDOneSignal        SubscriberChannelDtoProviderID = "one-signal"
	SubscriberChannelDtoProviderIDPushpad          SubscriberChannelDtoProviderID = "pushpad"
	SubscriberChannelDtoProviderIDPushWebhook      SubscriberChannelDtoProviderID = "push-webhook"
	SubscriberChannelDtoProviderIDPusherBeams      SubscriberChannelDtoProviderID = "pusher-beams"
)

func (e SubscriberChannelDtoProviderID) ToPointer() *SubscriberChannelDtoProviderID {
	return &e
}
func (e *SubscriberChannelDtoProviderID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "slack":
		fallthrough
	case "discord":
		fallthrough
	case "msteams":
		fallthrough
	case "mattermost":
		fallthrough
	case "ryver":
		fallthrough
	case "zulip":
		fallthrough
	case "grafana-on-call":
		fallthrough
	case "getstream":
		fallthrough
	case "rocket-chat":
		fallthrough
	case "whatsapp-business":
		fallthrough
	case "fcm":
		fallthrough
	case "apns":
		fallthrough
	case "expo":
		fallthrough
	case "one-signal":
		fallthrough
	case "pushpad":
		fallthrough
	case "push-webhook":
		fallthrough
	case "pusher-beams":
		*e = SubscriberChannelDtoProviderID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriberChannelDtoProviderID: %v", v)
	}
}

type SubscriberChannelDto struct {
	// The ID of the chat or push provider.
	ProviderID SubscriberChannelDtoProviderID `json:"providerId"`
	// An optional identifier for the integration.
	IntegrationIdentifier *string `json:"integrationIdentifier,omitempty"`
	// Credentials for the channel.
	Credentials ChannelCredentialsDto `json:"credentials"`
}

func (o *SubscriberChannelDto) GetProviderID() SubscriberChannelDtoProviderID {
	if o == nil {
		return SubscriberChannelDtoProviderID("")
	}
	return o.ProviderID
}

func (o *SubscriberChannelDto) GetIntegrationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIdentifier
}

func (o *SubscriberChannelDto) GetCredentials() ChannelCredentialsDto {
	if o == nil {
		return ChannelCredentialsDto{}
	}
	return o.Credentials
}
