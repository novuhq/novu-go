// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Status of the event
type Status string

const (
	StatusOpened       Status = "opened"
	StatusRejected     Status = "rejected"
	StatusSent         Status = "sent"
	StatusDeferred     Status = "deferred"
	StatusDelivered    Status = "delivered"
	StatusBounced      Status = "bounced"
	StatusDropped      Status = "dropped"
	StatusClicked      Status = "clicked"
	StatusBlocked      Status = "blocked"
	StatusSpam         Status = "spam"
	StatusUnsubscribed Status = "unsubscribed"
	StatusDelayed      Status = "delayed"
	StatusComplaint    Status = "complaint"
	StatusCreated      Status = "created"
	StatusAccepted     Status = "accepted"
	StatusQueued       Status = "queued"
	StatusSending      Status = "sending"
	StatusFailed       Status = "failed"
	StatusUndelivered  Status = "undelivered"
	StatusDismissed    Status = "dismissed"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "opened":
		fallthrough
	case "rejected":
		fallthrough
	case "sent":
		fallthrough
	case "deferred":
		fallthrough
	case "delivered":
		fallthrough
	case "bounced":
		fallthrough
	case "dropped":
		fallthrough
	case "clicked":
		fallthrough
	case "blocked":
		fallthrough
	case "spam":
		fallthrough
	case "unsubscribed":
		fallthrough
	case "delayed":
		fallthrough
	case "complaint":
		fallthrough
	case "created":
		fallthrough
	case "accepted":
		fallthrough
	case "queued":
		fallthrough
	case "sending":
		fallthrough
	case "failed":
		fallthrough
	case "undelivered":
		fallthrough
	case "dismissed":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type EventBody struct {
	// Status of the event
	Status Status `json:"status"`
	// Date of the event
	Date string `json:"date"`
	// External ID from the provider
	ExternalID *string `json:"externalId,omitempty"`
	// Number of attempts
	Attempts *float64 `json:"attempts,omitempty"`
	// Response from the provider
	Response *string `json:"response,omitempty"`
	// Raw content from the provider webhook
	Row *string `json:"row,omitempty"`
}

func (e *EventBody) GetStatus() Status {
	if e == nil {
		return Status("")
	}
	return e.Status
}

func (e *EventBody) GetDate() string {
	if e == nil {
		return ""
	}
	return e.Date
}

func (e *EventBody) GetExternalID() *string {
	if e == nil {
		return nil
	}
	return e.ExternalID
}

func (e *EventBody) GetAttempts() *float64 {
	if e == nil {
		return nil
	}
	return e.Attempts
}

func (e *EventBody) GetResponse() *string {
	if e == nil {
		return nil
	}
	return e.Response
}

func (e *EventBody) GetRow() *string {
	if e == nil {
		return nil
	}
	return e.Row
}
