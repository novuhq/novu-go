// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/novuhq/novu-go/internal/utils"
)

// InAppStepResponseDtoControlValues - Control values for the in-app step
type InAppStepResponseDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// Content/body of the in-app message. Required if subject is empty.
	Body *string `json:"body,omitempty"`
	// Subject/title of the in-app message. Required if body is empty.
	Subject *string `json:"subject,omitempty"`
	// URL for an avatar image. Must be a valid URL or start with / or {{"{{"}} variable }}.
	Avatar *string `json:"avatar,omitempty"`
	// Primary action button details.
	PrimaryAction *ActionDto `json:"primaryAction,omitempty"`
	// Secondary action button details.
	SecondaryAction *ActionDto `json:"secondaryAction,omitempty"`
	// Redirection URL configuration for the main content click (if no actions defined/clicked)..
	Redirect *RedirectDto `json:"redirect,omitempty"`
	// Disable sanitization of the output.
	DisableOutputSanitization *bool `default:"false" json:"disableOutputSanitization"`
	// Additional data payload for the step.
	Data                 map[string]any `json:"data,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (i InAppStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InAppStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InAppStepResponseDtoControlValues) GetSkip() map[string]any {
	if i == nil {
		return nil
	}
	return i.Skip
}

func (i *InAppStepResponseDtoControlValues) GetBody() *string {
	if i == nil {
		return nil
	}
	return i.Body
}

func (i *InAppStepResponseDtoControlValues) GetSubject() *string {
	if i == nil {
		return nil
	}
	return i.Subject
}

func (i *InAppStepResponseDtoControlValues) GetAvatar() *string {
	if i == nil {
		return nil
	}
	return i.Avatar
}

func (i *InAppStepResponseDtoControlValues) GetPrimaryAction() *ActionDto {
	if i == nil {
		return nil
	}
	return i.PrimaryAction
}

func (i *InAppStepResponseDtoControlValues) GetSecondaryAction() *ActionDto {
	if i == nil {
		return nil
	}
	return i.SecondaryAction
}

func (i *InAppStepResponseDtoControlValues) GetRedirect() *RedirectDto {
	if i == nil {
		return nil
	}
	return i.Redirect
}

func (i *InAppStepResponseDtoControlValues) GetDisableOutputSanitization() *bool {
	if i == nil {
		return nil
	}
	return i.DisableOutputSanitization
}

func (i *InAppStepResponseDtoControlValues) GetData() map[string]any {
	if i == nil {
		return nil
	}
	return i.Data
}

func (i *InAppStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if i == nil {
		return nil
	}
	return i.AdditionalProperties
}

type InAppStepResponseDto struct {
	// Controls metadata for the in-app step
	Controls InAppControlsMetadataResponseDto `json:"controls"`
	// Control values for the in-app step
	ControlValues *InAppStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug string `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the layout
	Origin ResourceOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (i InAppStepResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InAppStepResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"controls", "variables", "stepId", "_id", "name", "slug", "type", "origin", "workflowId", "workflowDatabaseId"}); err != nil {
		return err
	}
	return nil
}

func (i *InAppStepResponseDto) GetControls() InAppControlsMetadataResponseDto {
	if i == nil {
		return InAppControlsMetadataResponseDto{}
	}
	return i.Controls
}

func (i *InAppStepResponseDto) GetControlValues() *InAppStepResponseDtoControlValues {
	if i == nil {
		return nil
	}
	return i.ControlValues
}

func (i *InAppStepResponseDto) GetVariables() map[string]any {
	if i == nil {
		return map[string]any{}
	}
	return i.Variables
}

func (i *InAppStepResponseDto) GetStepID() string {
	if i == nil {
		return ""
	}
	return i.StepID
}

func (i *InAppStepResponseDto) GetID() string {
	if i == nil {
		return ""
	}
	return i.ID
}

func (i *InAppStepResponseDto) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InAppStepResponseDto) GetSlug() string {
	if i == nil {
		return ""
	}
	return i.Slug
}

func (i *InAppStepResponseDto) GetType() StepTypeEnum {
	if i == nil {
		return StepTypeEnum("")
	}
	return i.Type
}

func (i *InAppStepResponseDto) GetOrigin() ResourceOriginEnum {
	if i == nil {
		return ResourceOriginEnum("")
	}
	return i.Origin
}

func (i *InAppStepResponseDto) GetWorkflowID() string {
	if i == nil {
		return ""
	}
	return i.WorkflowID
}

func (i *InAppStepResponseDto) GetWorkflowDatabaseID() string {
	if i == nil {
		return ""
	}
	return i.WorkflowDatabaseID
}

func (i *InAppStepResponseDto) GetIssues() *StepIssuesDto {
	if i == nil {
		return nil
	}
	return i.Issues
}
