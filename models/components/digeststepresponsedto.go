// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// DigestStepResponseDtoType - The type of digest strategy. Determines which fields are applicable.
type DigestStepResponseDtoType string

const (
	DigestStepResponseDtoTypeRegular DigestStepResponseDtoType = "regular"
	DigestStepResponseDtoTypeTimed   DigestStepResponseDtoType = "timed"
)

func (e DigestStepResponseDtoType) ToPointer() *DigestStepResponseDtoType {
	return &e
}
func (e *DigestStepResponseDtoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		fallthrough
	case "timed":
		*e = DigestStepResponseDtoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestStepResponseDtoType: %v", v)
	}
}

// DigestStepResponseDtoUnit - The unit of time for the digest interval (for REGULAR type).
type DigestStepResponseDtoUnit string

const (
	DigestStepResponseDtoUnitSeconds DigestStepResponseDtoUnit = "seconds"
	DigestStepResponseDtoUnitMinutes DigestStepResponseDtoUnit = "minutes"
	DigestStepResponseDtoUnitHours   DigestStepResponseDtoUnit = "hours"
	DigestStepResponseDtoUnitDays    DigestStepResponseDtoUnit = "days"
	DigestStepResponseDtoUnitWeeks   DigestStepResponseDtoUnit = "weeks"
	DigestStepResponseDtoUnitMonths  DigestStepResponseDtoUnit = "months"
)

func (e DigestStepResponseDtoUnit) ToPointer() *DigestStepResponseDtoUnit {
	return &e
}
func (e *DigestStepResponseDtoUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = DigestStepResponseDtoUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestStepResponseDtoUnit: %v", v)
	}
}

// DigestStepResponseDtoControlValues - Control values for the digest step
type DigestStepResponseDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// The type of digest strategy. Determines which fields are applicable.
	Type *DigestStepResponseDtoType `json:"type,omitempty"`
	// The amount of time for the digest interval (for REGULAR type). Min 1.
	Amount *float64 `json:"amount,omitempty"`
	// The unit of time for the digest interval (for REGULAR type).
	Unit *DigestStepResponseDtoUnit `json:"unit,omitempty"`
	// Configuration for look-back window (for REGULAR type).
	LookBackWindow *LookBackWindowDto `json:"lookBackWindow,omitempty"`
	// Cron expression for TIMED digest. Min length 1.
	Cron *string `json:"cron,omitempty"`
	// Specify a custom key for digesting events instead of the default event key.
	DigestKey            *string        `json:"digestKey,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (d DigestStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DigestStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *DigestStepResponseDtoControlValues) GetSkip() map[string]any {
	if d == nil {
		return nil
	}
	return d.Skip
}

func (d *DigestStepResponseDtoControlValues) GetType() *DigestStepResponseDtoType {
	if d == nil {
		return nil
	}
	return d.Type
}

func (d *DigestStepResponseDtoControlValues) GetAmount() *float64 {
	if d == nil {
		return nil
	}
	return d.Amount
}

func (d *DigestStepResponseDtoControlValues) GetUnit() *DigestStepResponseDtoUnit {
	if d == nil {
		return nil
	}
	return d.Unit
}

func (d *DigestStepResponseDtoControlValues) GetLookBackWindow() *LookBackWindowDto {
	if d == nil {
		return nil
	}
	return d.LookBackWindow
}

func (d *DigestStepResponseDtoControlValues) GetCron() *string {
	if d == nil {
		return nil
	}
	return d.Cron
}

func (d *DigestStepResponseDtoControlValues) GetDigestKey() *string {
	if d == nil {
		return nil
	}
	return d.DigestKey
}

func (d *DigestStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if d == nil {
		return nil
	}
	return d.AdditionalProperties
}

type DigestStepResponseDto struct {
	// Controls metadata for the digest step
	Controls DigestControlsMetadataResponseDto `json:"controls"`
	// Control values for the digest step
	ControlValues *DigestStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug string `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the layout
	Origin ResourceOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (d DigestStepResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DigestStepResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"controls", "variables", "stepId", "_id", "name", "slug", "type", "origin", "workflowId", "workflowDatabaseId"}); err != nil {
		return err
	}
	return nil
}

func (d *DigestStepResponseDto) GetControls() DigestControlsMetadataResponseDto {
	if d == nil {
		return DigestControlsMetadataResponseDto{}
	}
	return d.Controls
}

func (d *DigestStepResponseDto) GetControlValues() *DigestStepResponseDtoControlValues {
	if d == nil {
		return nil
	}
	return d.ControlValues
}

func (d *DigestStepResponseDto) GetVariables() map[string]any {
	if d == nil {
		return map[string]any{}
	}
	return d.Variables
}

func (d *DigestStepResponseDto) GetStepID() string {
	if d == nil {
		return ""
	}
	return d.StepID
}

func (d *DigestStepResponseDto) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DigestStepResponseDto) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DigestStepResponseDto) GetSlug() string {
	if d == nil {
		return ""
	}
	return d.Slug
}

func (d *DigestStepResponseDto) GetType() StepTypeEnum {
	if d == nil {
		return StepTypeEnum("")
	}
	return d.Type
}

func (d *DigestStepResponseDto) GetOrigin() ResourceOriginEnum {
	if d == nil {
		return ResourceOriginEnum("")
	}
	return d.Origin
}

func (d *DigestStepResponseDto) GetWorkflowID() string {
	if d == nil {
		return ""
	}
	return d.WorkflowID
}

func (d *DigestStepResponseDto) GetWorkflowDatabaseID() string {
	if d == nil {
		return ""
	}
	return d.WorkflowDatabaseID
}

func (d *DigestStepResponseDto) GetIssues() *StepIssuesDto {
	if d == nil {
		return nil
	}
	return d.Issues
}
