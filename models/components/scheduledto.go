// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Monday schedule
type Monday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (m *Monday) GetIsEnabled() bool {
	if m == nil {
		return false
	}
	return m.IsEnabled
}

func (m *Monday) GetHours() []TimeRangeDto {
	if m == nil {
		return nil
	}
	return m.Hours
}

// Tuesday schedule
type Tuesday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (t *Tuesday) GetIsEnabled() bool {
	if t == nil {
		return false
	}
	return t.IsEnabled
}

func (t *Tuesday) GetHours() []TimeRangeDto {
	if t == nil {
		return nil
	}
	return t.Hours
}

// Wednesday schedule
type Wednesday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (w *Wednesday) GetIsEnabled() bool {
	if w == nil {
		return false
	}
	return w.IsEnabled
}

func (w *Wednesday) GetHours() []TimeRangeDto {
	if w == nil {
		return nil
	}
	return w.Hours
}

// Thursday schedule
type Thursday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (t *Thursday) GetIsEnabled() bool {
	if t == nil {
		return false
	}
	return t.IsEnabled
}

func (t *Thursday) GetHours() []TimeRangeDto {
	if t == nil {
		return nil
	}
	return t.Hours
}

// Friday schedule
type Friday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (f *Friday) GetIsEnabled() bool {
	if f == nil {
		return false
	}
	return f.IsEnabled
}

func (f *Friday) GetHours() []TimeRangeDto {
	if f == nil {
		return nil
	}
	return f.Hours
}

// Saturday schedule
type Saturday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (s *Saturday) GetIsEnabled() bool {
	if s == nil {
		return false
	}
	return s.IsEnabled
}

func (s *Saturday) GetHours() []TimeRangeDto {
	if s == nil {
		return nil
	}
	return s.Hours
}

// Sunday schedule
type Sunday struct {
	// Day schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Hours
	Hours []TimeRangeDto `json:"hours,omitempty"`
}

func (s *Sunday) GetIsEnabled() bool {
	if s == nil {
		return false
	}
	return s.IsEnabled
}

func (s *Sunday) GetHours() []TimeRangeDto {
	if s == nil {
		return nil
	}
	return s.Hours
}

// WeeklySchedule - Weekly schedule
type WeeklySchedule struct {
	// Monday schedule
	Monday *Monday `json:"monday,omitempty"`
	// Tuesday schedule
	Tuesday *Tuesday `json:"tuesday,omitempty"`
	// Wednesday schedule
	Wednesday *Wednesday `json:"wednesday,omitempty"`
	// Thursday schedule
	Thursday *Thursday `json:"thursday,omitempty"`
	// Friday schedule
	Friday *Friday `json:"friday,omitempty"`
	// Saturday schedule
	Saturday *Saturday `json:"saturday,omitempty"`
	// Sunday schedule
	Sunday *Sunday `json:"sunday,omitempty"`
}

func (w *WeeklySchedule) GetMonday() *Monday {
	if w == nil {
		return nil
	}
	return w.Monday
}

func (w *WeeklySchedule) GetTuesday() *Tuesday {
	if w == nil {
		return nil
	}
	return w.Tuesday
}

func (w *WeeklySchedule) GetWednesday() *Wednesday {
	if w == nil {
		return nil
	}
	return w.Wednesday
}

func (w *WeeklySchedule) GetThursday() *Thursday {
	if w == nil {
		return nil
	}
	return w.Thursday
}

func (w *WeeklySchedule) GetFriday() *Friday {
	if w == nil {
		return nil
	}
	return w.Friday
}

func (w *WeeklySchedule) GetSaturday() *Saturday {
	if w == nil {
		return nil
	}
	return w.Saturday
}

func (w *WeeklySchedule) GetSunday() *Sunday {
	if w == nil {
		return nil
	}
	return w.Sunday
}

type ScheduleDto struct {
	// Schedule enabled
	IsEnabled bool `json:"isEnabled"`
	// Weekly schedule
	WeeklySchedule *WeeklySchedule `json:"weeklySchedule,omitempty"`
}

func (s *ScheduleDto) GetIsEnabled() bool {
	if s == nil {
		return false
	}
	return s.IsEnabled
}

func (s *ScheduleDto) GetWeeklySchedule() *WeeklySchedule {
	if s == nil {
		return nil
	}
	return s.WeeklySchedule
}
