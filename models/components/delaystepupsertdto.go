// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type DelayStepUpsertDtoControlValuesType string

const (
	DelayStepUpsertDtoControlValuesTypeDelayControlDto DelayStepUpsertDtoControlValuesType = "DelayControlDto"
	DelayStepUpsertDtoControlValuesTypeMapOfAny        DelayStepUpsertDtoControlValuesType = "mapOfAny"
)

// DelayStepUpsertDtoControlValues - Control values for the Delay step.
type DelayStepUpsertDtoControlValues struct {
	DelayControlDto *DelayControlDto `queryParam:"inline"`
	MapOfAny        map[string]any   `queryParam:"inline"`

	Type DelayStepUpsertDtoControlValuesType
}

func CreateDelayStepUpsertDtoControlValuesDelayControlDto(delayControlDto DelayControlDto) DelayStepUpsertDtoControlValues {
	typ := DelayStepUpsertDtoControlValuesTypeDelayControlDto

	return DelayStepUpsertDtoControlValues{
		DelayControlDto: &delayControlDto,
		Type:            typ,
	}
}

func CreateDelayStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) DelayStepUpsertDtoControlValues {
	typ := DelayStepUpsertDtoControlValuesTypeMapOfAny

	return DelayStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *DelayStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var delayControlDto DelayControlDto = DelayControlDto{}
	if err := utils.UnmarshalJSON(data, &delayControlDto, "", true, true); err == nil {
		u.DelayControlDto = &delayControlDto
		u.Type = DelayStepUpsertDtoControlValuesTypeDelayControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = DelayStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DelayStepUpsertDtoControlValues", string(data))
}

func (u DelayStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.DelayControlDto != nil {
		return utils.MarshalJSON(u.DelayControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type DelayStepUpsertDtoControlValues: all fields are null")
}

type DelayStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Delay step.
	ControlValues *DelayStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (o *DelayStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DelayStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DelayStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *DelayStepUpsertDto) GetControlValues() *DelayStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
