// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type MessageIDType string

const (
	MessageIDTypeStr        MessageIDType = "str"
	MessageIDTypeArrayOfStr MessageIDType = "arrayOfStr"
)

type MessageID struct {
	Str        *string  `queryParam:"inline,name=messageId"`
	ArrayOfStr []string `queryParam:"inline,name=messageId"`

	Type MessageIDType
}

func CreateMessageIDStr(str string) MessageID {
	typ := MessageIDTypeStr

	return MessageID{
		Str:  &str,
		Type: typ,
	}
}

func CreateMessageIDArrayOfStr(arrayOfStr []string) MessageID {
	typ := MessageIDTypeArrayOfStr

	return MessageID{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *MessageID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = MessageIDTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = MessageIDTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MessageID", string(data))
}

func (u MessageID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type MessageID: all fields are null")
}

type MessageMarkAsRequestDtoMarkAs string

const (
	MessageMarkAsRequestDtoMarkAsRead   MessageMarkAsRequestDtoMarkAs = "read"
	MessageMarkAsRequestDtoMarkAsSeen   MessageMarkAsRequestDtoMarkAs = "seen"
	MessageMarkAsRequestDtoMarkAsUnread MessageMarkAsRequestDtoMarkAs = "unread"
	MessageMarkAsRequestDtoMarkAsUnseen MessageMarkAsRequestDtoMarkAs = "unseen"
)

func (e MessageMarkAsRequestDtoMarkAs) ToPointer() *MessageMarkAsRequestDtoMarkAs {
	return &e
}
func (e *MessageMarkAsRequestDtoMarkAs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "seen":
		fallthrough
	case "unread":
		fallthrough
	case "unseen":
		*e = MessageMarkAsRequestDtoMarkAs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageMarkAsRequestDtoMarkAs: %v", v)
	}
}

type MessageMarkAsRequestDto struct {
	MessageID MessageID                     `json:"messageId"`
	MarkAs    MessageMarkAsRequestDtoMarkAs `json:"markAs"`
}

func (m *MessageMarkAsRequestDto) GetMessageID() MessageID {
	if m == nil {
		return MessageID{}
	}
	return m.MessageID
}

func (m *MessageMarkAsRequestDto) GetMarkAs() MessageMarkAsRequestDtoMarkAs {
	if m == nil {
		return MessageMarkAsRequestDtoMarkAs("")
	}
	return m.MarkAs
}
