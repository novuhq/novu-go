// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/novuhq/novu-go/internal/utils"
)

// PushStepResponseDtoControlValues - Control values for the push step
type PushStepResponseDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// Subject/title of the push notification.
	Subject *string `json:"subject,omitempty"`
	// Body content of the push notification.
	Body                 *string        `json:"body,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (p PushStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PushStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PushStepResponseDtoControlValues) GetSkip() map[string]any {
	if p == nil {
		return nil
	}
	return p.Skip
}

func (p *PushStepResponseDtoControlValues) GetSubject() *string {
	if p == nil {
		return nil
	}
	return p.Subject
}

func (p *PushStepResponseDtoControlValues) GetBody() *string {
	if p == nil {
		return nil
	}
	return p.Body
}

func (p *PushStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if p == nil {
		return nil
	}
	return p.AdditionalProperties
}

type PushStepResponseDto struct {
	// Controls metadata for the push step
	Controls PushControlsMetadataResponseDto `json:"controls"`
	// Control values for the push step
	ControlValues *PushStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug string `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the layout
	Origin ResourceOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (p PushStepResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PushStepResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"controls", "variables", "stepId", "_id", "name", "slug", "type", "origin", "workflowId", "workflowDatabaseId"}); err != nil {
		return err
	}
	return nil
}

func (p *PushStepResponseDto) GetControls() PushControlsMetadataResponseDto {
	if p == nil {
		return PushControlsMetadataResponseDto{}
	}
	return p.Controls
}

func (p *PushStepResponseDto) GetControlValues() *PushStepResponseDtoControlValues {
	if p == nil {
		return nil
	}
	return p.ControlValues
}

func (p *PushStepResponseDto) GetVariables() map[string]any {
	if p == nil {
		return map[string]any{}
	}
	return p.Variables
}

func (p *PushStepResponseDto) GetStepID() string {
	if p == nil {
		return ""
	}
	return p.StepID
}

func (p *PushStepResponseDto) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PushStepResponseDto) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PushStepResponseDto) GetSlug() string {
	if p == nil {
		return ""
	}
	return p.Slug
}

func (p *PushStepResponseDto) GetType() StepTypeEnum {
	if p == nil {
		return StepTypeEnum("")
	}
	return p.Type
}

func (p *PushStepResponseDto) GetOrigin() ResourceOriginEnum {
	if p == nil {
		return ResourceOriginEnum("")
	}
	return p.Origin
}

func (p *PushStepResponseDto) GetWorkflowID() string {
	if p == nil {
		return ""
	}
	return p.WorkflowID
}

func (p *PushStepResponseDto) GetWorkflowDatabaseID() string {
	if p == nil {
		return ""
	}
	return p.WorkflowDatabaseID
}

func (p *PushStepResponseDto) GetIssues() *StepIssuesDto {
	if p == nil {
		return nil
	}
	return p.Issues
}
