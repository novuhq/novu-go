// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type Value5Type string

const (
	Value5TypeStr      Value5Type = "str"
	Value5TypeNumber   Value5Type = "number"
	Value5TypeBoolean  Value5Type = "boolean"
	Value5TypeMapOfAny Value5Type = "mapOfAny"
)

type Value5 struct {
	Str      *string        `queryParam:"inline" name:"five"`
	Number   *float64       `queryParam:"inline" name:"five"`
	Boolean  *bool          `queryParam:"inline" name:"five"`
	MapOfAny map[string]any `queryParam:"inline" name:"five"`

	Type Value5Type
}

func CreateValue5Str(str string) Value5 {
	typ := Value5TypeStr

	return Value5{
		Str:  &str,
		Type: typ,
	}
}

func CreateValue5Number(number float64) Value5 {
	typ := Value5TypeNumber

	return Value5{
		Number: &number,
		Type:   typ,
	}
}

func CreateValue5Boolean(boolean bool) Value5 {
	typ := Value5TypeBoolean

	return Value5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValue5MapOfAny(mapOfAny map[string]any) Value5 {
	typ := Value5TypeMapOfAny

	return Value5{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *Value5) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = Value5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = Value5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = Value5TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = Value5TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value5", string(data))
}

func (u Value5) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Value5: all fields are null")
}

type Value4 struct {
}

func (v Value4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *Value4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

type PayloadValidationErrorDtoValueType string

const (
	PayloadValidationErrorDtoValueTypeStr           PayloadValidationErrorDtoValueType = "str"
	PayloadValidationErrorDtoValueTypeNumber        PayloadValidationErrorDtoValueType = "number"
	PayloadValidationErrorDtoValueTypeBoolean       PayloadValidationErrorDtoValueType = "boolean"
	PayloadValidationErrorDtoValueTypeValue4        PayloadValidationErrorDtoValueType = "value_4"
	PayloadValidationErrorDtoValueTypeArrayOfValue5 PayloadValidationErrorDtoValueType = "arrayOfValue5"
)

// PayloadValidationErrorDtoValue - The actual value that failed validation
type PayloadValidationErrorDtoValue struct {
	Str           *string   `queryParam:"inline" name:"value"`
	Number        *float64  `queryParam:"inline" name:"value"`
	Boolean       *bool     `queryParam:"inline" name:"value"`
	Value4        *Value4   `queryParam:"inline" name:"value"`
	ArrayOfValue5 []*Value5 `queryParam:"inline" name:"value"`

	Type PayloadValidationErrorDtoValueType
}

func CreatePayloadValidationErrorDtoValueStr(str string) PayloadValidationErrorDtoValue {
	typ := PayloadValidationErrorDtoValueTypeStr

	return PayloadValidationErrorDtoValue{
		Str:  &str,
		Type: typ,
	}
}

func CreatePayloadValidationErrorDtoValueNumber(number float64) PayloadValidationErrorDtoValue {
	typ := PayloadValidationErrorDtoValueTypeNumber

	return PayloadValidationErrorDtoValue{
		Number: &number,
		Type:   typ,
	}
}

func CreatePayloadValidationErrorDtoValueBoolean(boolean bool) PayloadValidationErrorDtoValue {
	typ := PayloadValidationErrorDtoValueTypeBoolean

	return PayloadValidationErrorDtoValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePayloadValidationErrorDtoValueValue4(value4 Value4) PayloadValidationErrorDtoValue {
	typ := PayloadValidationErrorDtoValueTypeValue4

	return PayloadValidationErrorDtoValue{
		Value4: &value4,
		Type:   typ,
	}
}

func CreatePayloadValidationErrorDtoValueArrayOfValue5(arrayOfValue5 []*Value5) PayloadValidationErrorDtoValue {
	typ := PayloadValidationErrorDtoValueTypeArrayOfValue5

	return PayloadValidationErrorDtoValue{
		ArrayOfValue5: arrayOfValue5,
		Type:          typ,
	}
}

func (u *PayloadValidationErrorDtoValue) UnmarshalJSON(data []byte) error {

	var value4 Value4 = Value4{}
	if err := utils.UnmarshalJSON(data, &value4, "", true, nil); err == nil {
		u.Value4 = &value4
		u.Type = PayloadValidationErrorDtoValueTypeValue4
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = PayloadValidationErrorDtoValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = PayloadValidationErrorDtoValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = PayloadValidationErrorDtoValueTypeBoolean
		return nil
	}

	var arrayOfValue5 []*Value5 = []*Value5{}
	if err := utils.UnmarshalJSON(data, &arrayOfValue5, "", true, nil); err == nil {
		u.ArrayOfValue5 = arrayOfValue5
		u.Type = PayloadValidationErrorDtoValueTypeArrayOfValue5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadValidationErrorDtoValue", string(data))
}

func (u PayloadValidationErrorDtoValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Value4 != nil {
		return utils.MarshalJSON(u.Value4, "", true)
	}

	if u.ArrayOfValue5 != nil {
		return utils.MarshalJSON(u.ArrayOfValue5, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadValidationErrorDtoValue: all fields are null")
}

type PayloadValidationErrorDto struct {
	// Field path that failed validation
	Field string `json:"field"`
	// Validation error message
	Message string `json:"message"`
	// The actual value that failed validation
	Value *PayloadValidationErrorDtoValue `json:"value,omitempty"`
	// JSON Schema path where the validation failed
	SchemaPath *string `json:"schemaPath,omitempty"`
}

func (o *PayloadValidationErrorDto) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *PayloadValidationErrorDto) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *PayloadValidationErrorDto) GetValue() *PayloadValidationErrorDtoValue {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PayloadValidationErrorDto) GetSchemaPath() *string {
	if o == nil {
		return nil
	}
	return o.SchemaPath
}
