// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ResourceType - The resource type to associate translation with
type ResourceType string

const (
	ResourceTypeWorkflow ResourceType = "workflow"
	ResourceTypeLayout   ResourceType = "layout"
)

func (e ResourceType) ToPointer() *ResourceType {
	return &e
}
func (e *ResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workflow":
		fallthrough
	case "layout":
		*e = ResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceType: %v", v)
	}
}

// Content - Translation content as JSON object
type Content struct {
}

type CreateTranslationRequestDto struct {
	// The resource ID to associate translation with. Accepts identifier or slug format
	ResourceID string `json:"resourceId"`
	// The resource type to associate translation with
	ResourceType ResourceType `json:"resourceType"`
	// Locale code (e.g., en_US, es_ES)
	Locale string `json:"locale"`
	// Translation content as JSON object
	Content Content `json:"content"`
}

func (c *CreateTranslationRequestDto) GetResourceID() string {
	if c == nil {
		return ""
	}
	return c.ResourceID
}

func (c *CreateTranslationRequestDto) GetResourceType() ResourceType {
	if c == nil {
		return ResourceType("")
	}
	return c.ResourceType
}

func (c *CreateTranslationRequestDto) GetLocale() string {
	if c == nil {
		return ""
	}
	return c.Locale
}

func (c *CreateTranslationRequestDto) GetContent() Content {
	if c == nil {
		return Content{}
	}
	return c.Content
}
