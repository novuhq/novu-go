// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DigestControlDtoType - The type of digest strategy. Determines which fields are applicable.
type DigestControlDtoType string

const (
	DigestControlDtoTypeRegular DigestControlDtoType = "regular"
	DigestControlDtoTypeTimed   DigestControlDtoType = "timed"
)

func (e DigestControlDtoType) ToPointer() *DigestControlDtoType {
	return &e
}
func (e *DigestControlDtoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		fallthrough
	case "timed":
		*e = DigestControlDtoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestControlDtoType: %v", v)
	}
}

// DigestControlDtoUnit - The unit of time for the digest interval (for REGULAR type).
type DigestControlDtoUnit string

const (
	DigestControlDtoUnitSeconds DigestControlDtoUnit = "seconds"
	DigestControlDtoUnitMinutes DigestControlDtoUnit = "minutes"
	DigestControlDtoUnitHours   DigestControlDtoUnit = "hours"
	DigestControlDtoUnitDays    DigestControlDtoUnit = "days"
	DigestControlDtoUnitWeeks   DigestControlDtoUnit = "weeks"
	DigestControlDtoUnitMonths  DigestControlDtoUnit = "months"
)

func (e DigestControlDtoUnit) ToPointer() *DigestControlDtoUnit {
	return &e
}
func (e *DigestControlDtoUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = DigestControlDtoUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestControlDtoUnit: %v", v)
	}
}

type DigestControlDto struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// The type of digest strategy. Determines which fields are applicable.
	Type *DigestControlDtoType `json:"type,omitempty"`
	// The amount of time for the digest interval (for REGULAR type). Min 1.
	Amount *float64 `json:"amount,omitempty"`
	// The unit of time for the digest interval (for REGULAR type).
	Unit *DigestControlDtoUnit `json:"unit,omitempty"`
	// Configuration for look-back window (for REGULAR type).
	LookBackWindow *LookBackWindowDto `json:"lookBackWindow,omitempty"`
	// Cron expression for TIMED digest. Min length 1.
	Cron *string `json:"cron,omitempty"`
	// Specify a custom key for digesting events instead of the default event key.
	DigestKey *string `json:"digestKey,omitempty"`
}

func (o *DigestControlDto) GetSkip() map[string]any {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *DigestControlDto) GetType() *DigestControlDtoType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DigestControlDto) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *DigestControlDto) GetUnit() *DigestControlDtoUnit {
	if o == nil {
		return nil
	}
	return o.Unit
}

func (o *DigestControlDto) GetLookBackWindow() *LookBackWindowDto {
	if o == nil {
		return nil
	}
	return o.LookBackWindow
}

func (o *DigestControlDto) GetCron() *string {
	if o == nil {
		return nil
	}
	return o.Cron
}

func (o *DigestControlDto) GetDigestKey() *string {
	if o == nil {
		return nil
	}
	return o.DigestKey
}
