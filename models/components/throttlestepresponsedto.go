// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// ThrottleStepResponseDtoType - The type of throttle window.
type ThrottleStepResponseDtoType string

const (
	ThrottleStepResponseDtoTypeFixed   ThrottleStepResponseDtoType = "fixed"
	ThrottleStepResponseDtoTypeDynamic ThrottleStepResponseDtoType = "dynamic"
)

func (e ThrottleStepResponseDtoType) ToPointer() *ThrottleStepResponseDtoType {
	return &e
}
func (e *ThrottleStepResponseDtoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "dynamic":
		*e = ThrottleStepResponseDtoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThrottleStepResponseDtoType: %v", v)
	}
}

// ThrottleStepResponseDtoUnit - The unit of time for the throttle window (required for fixed type).
type ThrottleStepResponseDtoUnit string

const (
	ThrottleStepResponseDtoUnitMinutes ThrottleStepResponseDtoUnit = "minutes"
	ThrottleStepResponseDtoUnitHours   ThrottleStepResponseDtoUnit = "hours"
	ThrottleStepResponseDtoUnitDays    ThrottleStepResponseDtoUnit = "days"
)

func (e ThrottleStepResponseDtoUnit) ToPointer() *ThrottleStepResponseDtoUnit {
	return &e
}
func (e *ThrottleStepResponseDtoUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		*e = ThrottleStepResponseDtoUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThrottleStepResponseDtoUnit: %v", v)
	}
}

// ThrottleStepResponseDtoControlValues - Control values for the throttle step
type ThrottleStepResponseDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// The type of throttle window.
	Type *ThrottleStepResponseDtoType `default:"fixed" json:"type"`
	// The amount of time for the throttle window (required for fixed type).
	Amount *float64 `json:"amount,omitempty"`
	// The unit of time for the throttle window (required for fixed type).
	Unit *ThrottleStepResponseDtoUnit `json:"unit,omitempty"`
	// Key path to retrieve dynamic window value (required for dynamic type).
	DynamicKey *string `json:"dynamicKey,omitempty"`
	// The maximum number of executions allowed within the window. Defaults to 1.
	Threshold *float64 `default:"1" json:"threshold"`
	// Optional key for grouping throttle rules. If not provided, defaults to workflow and subscriber combination.
	ThrottleKey          *string        `json:"throttleKey,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (t ThrottleStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *ThrottleStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *ThrottleStepResponseDtoControlValues) GetSkip() map[string]any {
	if t == nil {
		return nil
	}
	return t.Skip
}

func (t *ThrottleStepResponseDtoControlValues) GetType() *ThrottleStepResponseDtoType {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *ThrottleStepResponseDtoControlValues) GetAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.Amount
}

func (t *ThrottleStepResponseDtoControlValues) GetUnit() *ThrottleStepResponseDtoUnit {
	if t == nil {
		return nil
	}
	return t.Unit
}

func (t *ThrottleStepResponseDtoControlValues) GetDynamicKey() *string {
	if t == nil {
		return nil
	}
	return t.DynamicKey
}

func (t *ThrottleStepResponseDtoControlValues) GetThreshold() *float64 {
	if t == nil {
		return nil
	}
	return t.Threshold
}

func (t *ThrottleStepResponseDtoControlValues) GetThrottleKey() *string {
	if t == nil {
		return nil
	}
	return t.ThrottleKey
}

func (t *ThrottleStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if t == nil {
		return nil
	}
	return t.AdditionalProperties
}

type ThrottleStepResponseDto struct {
	// Controls metadata for the throttle step
	Controls ThrottleControlsMetadataResponseDto `json:"controls"`
	// Control values for the throttle step
	ControlValues *ThrottleStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug string `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the layout
	Origin ResourceOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (t ThrottleStepResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *ThrottleStepResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"controls", "variables", "stepId", "_id", "name", "slug", "type", "origin", "workflowId", "workflowDatabaseId"}); err != nil {
		return err
	}
	return nil
}

func (t *ThrottleStepResponseDto) GetControls() ThrottleControlsMetadataResponseDto {
	if t == nil {
		return ThrottleControlsMetadataResponseDto{}
	}
	return t.Controls
}

func (t *ThrottleStepResponseDto) GetControlValues() *ThrottleStepResponseDtoControlValues {
	if t == nil {
		return nil
	}
	return t.ControlValues
}

func (t *ThrottleStepResponseDto) GetVariables() map[string]any {
	if t == nil {
		return map[string]any{}
	}
	return t.Variables
}

func (t *ThrottleStepResponseDto) GetStepID() string {
	if t == nil {
		return ""
	}
	return t.StepID
}

func (t *ThrottleStepResponseDto) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *ThrottleStepResponseDto) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *ThrottleStepResponseDto) GetSlug() string {
	if t == nil {
		return ""
	}
	return t.Slug
}

func (t *ThrottleStepResponseDto) GetType() StepTypeEnum {
	if t == nil {
		return StepTypeEnum("")
	}
	return t.Type
}

func (t *ThrottleStepResponseDto) GetOrigin() ResourceOriginEnum {
	if t == nil {
		return ResourceOriginEnum("")
	}
	return t.Origin
}

func (t *ThrottleStepResponseDto) GetWorkflowID() string {
	if t == nil {
		return ""
	}
	return t.WorkflowID
}

func (t *ThrottleStepResponseDto) GetWorkflowDatabaseID() string {
	if t == nil {
		return ""
	}
	return t.WorkflowDatabaseID
}

func (t *ThrottleStepResponseDto) GetIssues() *StepIssuesDto {
	if t == nil {
		return nil
	}
	return t.Issues
}
