// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/novuhq/novu-go/internal/utils"
)

// ChatStepResponseDtoControlValues - Control values for the chat step
type ChatStepResponseDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// Content of the chat message.
	Body                 *string        `json:"body,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (c ChatStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ChatStepResponseDtoControlValues) GetSkip() map[string]any {
	if c == nil {
		return nil
	}
	return c.Skip
}

func (c *ChatStepResponseDtoControlValues) GetBody() *string {
	if c == nil {
		return nil
	}
	return c.Body
}

func (c *ChatStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if c == nil {
		return nil
	}
	return c.AdditionalProperties
}

type ChatStepResponseDto struct {
	// Controls metadata for the chat step
	Controls ChatControlsMetadataResponseDto `json:"controls"`
	// Control values for the chat step
	ControlValues *ChatStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug string `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the layout
	Origin ResourceOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (c ChatStepResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChatStepResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"controls", "variables", "stepId", "_id", "name", "slug", "type", "origin", "workflowId", "workflowDatabaseId"}); err != nil {
		return err
	}
	return nil
}

func (c *ChatStepResponseDto) GetControls() ChatControlsMetadataResponseDto {
	if c == nil {
		return ChatControlsMetadataResponseDto{}
	}
	return c.Controls
}

func (c *ChatStepResponseDto) GetControlValues() *ChatStepResponseDtoControlValues {
	if c == nil {
		return nil
	}
	return c.ControlValues
}

func (c *ChatStepResponseDto) GetVariables() map[string]any {
	if c == nil {
		return map[string]any{}
	}
	return c.Variables
}

func (c *ChatStepResponseDto) GetStepID() string {
	if c == nil {
		return ""
	}
	return c.StepID
}

func (c *ChatStepResponseDto) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *ChatStepResponseDto) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ChatStepResponseDto) GetSlug() string {
	if c == nil {
		return ""
	}
	return c.Slug
}

func (c *ChatStepResponseDto) GetType() StepTypeEnum {
	if c == nil {
		return StepTypeEnum("")
	}
	return c.Type
}

func (c *ChatStepResponseDto) GetOrigin() ResourceOriginEnum {
	if c == nil {
		return ResourceOriginEnum("")
	}
	return c.Origin
}

func (c *ChatStepResponseDto) GetWorkflowID() string {
	if c == nil {
		return ""
	}
	return c.WorkflowID
}

func (c *ChatStepResponseDto) GetWorkflowDatabaseID() string {
	if c == nil {
		return ""
	}
	return c.WorkflowDatabaseID
}

func (c *ChatStepResponseDto) GetIssues() *StepIssuesDto {
	if c == nil {
		return nil
	}
	return c.Issues
}
