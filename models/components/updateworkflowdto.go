// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type UpdateWorkflowDtoStepsType string

const (
	UpdateWorkflowDtoStepsTypeInApp  UpdateWorkflowDtoStepsType = "in_app"
	UpdateWorkflowDtoStepsTypeEmail  UpdateWorkflowDtoStepsType = "email"
	UpdateWorkflowDtoStepsTypeSms    UpdateWorkflowDtoStepsType = "sms"
	UpdateWorkflowDtoStepsTypePush   UpdateWorkflowDtoStepsType = "push"
	UpdateWorkflowDtoStepsTypeChat   UpdateWorkflowDtoStepsType = "chat"
	UpdateWorkflowDtoStepsTypeDelay  UpdateWorkflowDtoStepsType = "delay"
	UpdateWorkflowDtoStepsTypeDigest UpdateWorkflowDtoStepsType = "digest"
	UpdateWorkflowDtoStepsTypeCustom UpdateWorkflowDtoStepsType = "custom"
)

type UpdateWorkflowDtoSteps struct {
	InAppStepUpsertDto  *InAppStepUpsertDto  `queryParam:"inline" name:"steps"`
	EmailStepUpsertDto  *EmailStepUpsertDto  `queryParam:"inline" name:"steps"`
	SmsStepUpsertDto    *SmsStepUpsertDto    `queryParam:"inline" name:"steps"`
	PushStepUpsertDto   *PushStepUpsertDto   `queryParam:"inline" name:"steps"`
	ChatStepUpsertDto   *ChatStepUpsertDto   `queryParam:"inline" name:"steps"`
	DelayStepUpsertDto  *DelayStepUpsertDto  `queryParam:"inline" name:"steps"`
	DigestStepUpsertDto *DigestStepUpsertDto `queryParam:"inline" name:"steps"`
	CustomStepUpsertDto *CustomStepUpsertDto `queryParam:"inline" name:"steps"`

	Type UpdateWorkflowDtoStepsType
}

func CreateUpdateWorkflowDtoStepsInApp(inApp InAppStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeInApp

	typStr := StepTypeEnum(typ)
	inApp.Type = typStr

	return UpdateWorkflowDtoSteps{
		InAppStepUpsertDto: &inApp,
		Type:               typ,
	}
}

func CreateUpdateWorkflowDtoStepsEmail(email EmailStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeEmail

	typStr := StepTypeEnum(typ)
	email.Type = typStr

	return UpdateWorkflowDtoSteps{
		EmailStepUpsertDto: &email,
		Type:               typ,
	}
}

func CreateUpdateWorkflowDtoStepsSms(sms SmsStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeSms

	typStr := StepTypeEnum(typ)
	sms.Type = typStr

	return UpdateWorkflowDtoSteps{
		SmsStepUpsertDto: &sms,
		Type:             typ,
	}
}

func CreateUpdateWorkflowDtoStepsPush(push PushStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypePush

	typStr := StepTypeEnum(typ)
	push.Type = typStr

	return UpdateWorkflowDtoSteps{
		PushStepUpsertDto: &push,
		Type:              typ,
	}
}

func CreateUpdateWorkflowDtoStepsChat(chat ChatStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeChat

	typStr := StepTypeEnum(typ)
	chat.Type = typStr

	return UpdateWorkflowDtoSteps{
		ChatStepUpsertDto: &chat,
		Type:              typ,
	}
}

func CreateUpdateWorkflowDtoStepsDelay(delay DelayStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeDelay

	typStr := StepTypeEnum(typ)
	delay.Type = typStr

	return UpdateWorkflowDtoSteps{
		DelayStepUpsertDto: &delay,
		Type:               typ,
	}
}

func CreateUpdateWorkflowDtoStepsDigest(digest DigestStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeDigest

	typStr := StepTypeEnum(typ)
	digest.Type = typStr

	return UpdateWorkflowDtoSteps{
		DigestStepUpsertDto: &digest,
		Type:                typ,
	}
}

func CreateUpdateWorkflowDtoStepsCustom(custom CustomStepUpsertDto) UpdateWorkflowDtoSteps {
	typ := UpdateWorkflowDtoStepsTypeCustom

	typStr := StepTypeEnum(typ)
	custom.Type = typStr

	return UpdateWorkflowDtoSteps{
		CustomStepUpsertDto: &custom,
		Type:                typ,
	}
}

func (u *UpdateWorkflowDtoSteps) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "in_app":
		inAppStepUpsertDto := new(InAppStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &inAppStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == in_app) type InAppStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.InAppStepUpsertDto = inAppStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeInApp
		return nil
	case "email":
		emailStepUpsertDto := new(EmailStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &emailStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == email) type EmailStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.EmailStepUpsertDto = emailStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeEmail
		return nil
	case "sms":
		smsStepUpsertDto := new(SmsStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &smsStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sms) type SmsStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.SmsStepUpsertDto = smsStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeSms
		return nil
	case "push":
		pushStepUpsertDto := new(PushStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &pushStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == push) type PushStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.PushStepUpsertDto = pushStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypePush
		return nil
	case "chat":
		chatStepUpsertDto := new(ChatStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &chatStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == chat) type ChatStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.ChatStepUpsertDto = chatStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeChat
		return nil
	case "delay":
		delayStepUpsertDto := new(DelayStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &delayStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == delay) type DelayStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.DelayStepUpsertDto = delayStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeDelay
		return nil
	case "digest":
		digestStepUpsertDto := new(DigestStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &digestStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == digest) type DigestStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.DigestStepUpsertDto = digestStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeDigest
		return nil
	case "custom":
		customStepUpsertDto := new(CustomStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &customStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == custom) type CustomStepUpsertDto within UpdateWorkflowDtoSteps: %w", string(data), err)
		}

		u.CustomStepUpsertDto = customStepUpsertDto
		u.Type = UpdateWorkflowDtoStepsTypeCustom
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateWorkflowDtoSteps", string(data))
}

func (u UpdateWorkflowDtoSteps) MarshalJSON() ([]byte, error) {
	if u.InAppStepUpsertDto != nil {
		return utils.MarshalJSON(u.InAppStepUpsertDto, "", true)
	}

	if u.EmailStepUpsertDto != nil {
		return utils.MarshalJSON(u.EmailStepUpsertDto, "", true)
	}

	if u.SmsStepUpsertDto != nil {
		return utils.MarshalJSON(u.SmsStepUpsertDto, "", true)
	}

	if u.PushStepUpsertDto != nil {
		return utils.MarshalJSON(u.PushStepUpsertDto, "", true)
	}

	if u.ChatStepUpsertDto != nil {
		return utils.MarshalJSON(u.ChatStepUpsertDto, "", true)
	}

	if u.DelayStepUpsertDto != nil {
		return utils.MarshalJSON(u.DelayStepUpsertDto, "", true)
	}

	if u.DigestStepUpsertDto != nil {
		return utils.MarshalJSON(u.DigestStepUpsertDto, "", true)
	}

	if u.CustomStepUpsertDto != nil {
		return utils.MarshalJSON(u.CustomStepUpsertDto, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateWorkflowDtoSteps: all fields are null")
}

type UpdateWorkflowDto struct {
	// Name of the workflow
	Name string `json:"name"`
	// Description of the workflow
	Description *string `json:"description,omitempty"`
	// Tags associated with the workflow
	Tags []string `json:"tags,omitempty"`
	// Whether the workflow is active
	Active *bool `default:"false" json:"active"`
	// Enable or disable payload schema validation
	ValidatePayload *bool `json:"validatePayload,omitempty"`
	// The payload JSON Schema for the workflow
	PayloadSchema map[string]any `json:"payloadSchema,omitempty"`
	// Enable or disable translations for this workflow
	IsTranslationEnabled *bool `default:"false" json:"isTranslationEnabled"`
	// Workflow ID (allowed only for code-first workflows)
	WorkflowID *string `json:"workflowId,omitempty"`
	// Steps of the workflow
	Steps []UpdateWorkflowDtoSteps `json:"steps"`
	// Workflow preferences
	Preferences PreferencesRequestDto `json:"preferences"`
	// Origin of the workflow
	Origin ResourceOriginEnum `json:"origin"`
	// Severity of the workflow
	Severity *SeverityLevelEnum `json:"severity,omitempty"`
}

func (u UpdateWorkflowDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateWorkflowDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"name", "steps", "preferences", "origin"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateWorkflowDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateWorkflowDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateWorkflowDto) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UpdateWorkflowDto) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *UpdateWorkflowDto) GetValidatePayload() *bool {
	if o == nil {
		return nil
	}
	return o.ValidatePayload
}

func (o *UpdateWorkflowDto) GetPayloadSchema() map[string]any {
	if o == nil {
		return nil
	}
	return o.PayloadSchema
}

func (o *UpdateWorkflowDto) GetIsTranslationEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsTranslationEnabled
}

func (o *UpdateWorkflowDto) GetWorkflowID() *string {
	if o == nil {
		return nil
	}
	return o.WorkflowID
}

func (o *UpdateWorkflowDto) GetSteps() []UpdateWorkflowDtoSteps {
	if o == nil {
		return []UpdateWorkflowDtoSteps{}
	}
	return o.Steps
}

func (o *UpdateWorkflowDto) GetPreferences() PreferencesRequestDto {
	if o == nil {
		return PreferencesRequestDto{}
	}
	return o.Preferences
}

func (o *UpdateWorkflowDto) GetOrigin() ResourceOriginEnum {
	if o == nil {
		return ResourceOriginEnum("")
	}
	return o.Origin
}

func (o *UpdateWorkflowDto) GetSeverity() *SeverityLevelEnum {
	if o == nil {
		return nil
	}
	return o.Severity
}
