// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// UploadTranslationsRequestDtoResourceType - The resource type to associate localizations with
type UploadTranslationsRequestDtoResourceType string

const (
	UploadTranslationsRequestDtoResourceTypeWorkflow UploadTranslationsRequestDtoResourceType = "workflow"
)

func (e UploadTranslationsRequestDtoResourceType) ToPointer() *UploadTranslationsRequestDtoResourceType {
	return &e
}
func (e *UploadTranslationsRequestDtoResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workflow":
		*e = UploadTranslationsRequestDtoResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadTranslationsRequestDtoResourceType: %v", v)
	}
}

type UploadTranslationsRequestDto struct {
	// The resource ID to associate localizations with. Accepts identifier or slug format
	ResourceID string `multipartForm:"name=resourceId"`
	// The resource type to associate localizations with
	ResourceType UploadTranslationsRequestDtoResourceType `multipartForm:"name=resourceType"`
}

func (u *UploadTranslationsRequestDto) GetResourceID() string {
	if u == nil {
		return ""
	}
	return u.ResourceID
}

func (u *UploadTranslationsRequestDto) GetResourceType() UploadTranslationsRequestDtoResourceType {
	if u == nil {
		return UploadTranslationsRequestDtoResourceType("")
	}
	return u.ResourceType
}
