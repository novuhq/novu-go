// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DigestRegularMetadataUnit string

const (
	DigestRegularMetadataUnitSeconds DigestRegularMetadataUnit = "seconds"
	DigestRegularMetadataUnitMinutes DigestRegularMetadataUnit = "minutes"
	DigestRegularMetadataUnitHours   DigestRegularMetadataUnit = "hours"
	DigestRegularMetadataUnitDays    DigestRegularMetadataUnit = "days"
	DigestRegularMetadataUnitWeeks   DigestRegularMetadataUnit = "weeks"
	DigestRegularMetadataUnitMonths  DigestRegularMetadataUnit = "months"
)

func (e DigestRegularMetadataUnit) ToPointer() *DigestRegularMetadataUnit {
	return &e
}
func (e *DigestRegularMetadataUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = DigestRegularMetadataUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestRegularMetadataUnit: %v", v)
	}
}

type DigestRegularMetadataType string

const (
	DigestRegularMetadataTypeRegular DigestRegularMetadataType = "regular"
	DigestRegularMetadataTypeBackoff DigestRegularMetadataType = "backoff"
)

func (e DigestRegularMetadataType) ToPointer() *DigestRegularMetadataType {
	return &e
}
func (e *DigestRegularMetadataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		fallthrough
	case "backoff":
		*e = DigestRegularMetadataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestRegularMetadataType: %v", v)
	}
}

type BackoffUnit string

const (
	BackoffUnitSeconds BackoffUnit = "seconds"
	BackoffUnitMinutes BackoffUnit = "minutes"
	BackoffUnitHours   BackoffUnit = "hours"
	BackoffUnitDays    BackoffUnit = "days"
	BackoffUnitWeeks   BackoffUnit = "weeks"
	BackoffUnitMonths  BackoffUnit = "months"
)

func (e BackoffUnit) ToPointer() *BackoffUnit {
	return &e
}
func (e *BackoffUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = BackoffUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackoffUnit: %v", v)
	}
}

type DigestRegularMetadata struct {
	Amount        *float64                   `json:"amount,omitempty"`
	Unit          *DigestRegularMetadataUnit `json:"unit,omitempty"`
	DigestKey     *string                    `json:"digestKey,omitempty"`
	Type          DigestRegularMetadataType  `json:"type"`
	Backoff       *bool                      `json:"backoff,omitempty"`
	BackoffAmount *float64                   `json:"backoffAmount,omitempty"`
	BackoffUnit   *BackoffUnit               `json:"backoffUnit,omitempty"`
	UpdateMode    *bool                      `json:"updateMode,omitempty"`
}

func (o *DigestRegularMetadata) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *DigestRegularMetadata) GetUnit() *DigestRegularMetadataUnit {
	if o == nil {
		return nil
	}
	return o.Unit
}

func (o *DigestRegularMetadata) GetDigestKey() *string {
	if o == nil {
		return nil
	}
	return o.DigestKey
}

func (o *DigestRegularMetadata) GetType() DigestRegularMetadataType {
	if o == nil {
		return DigestRegularMetadataType("")
	}
	return o.Type
}

func (o *DigestRegularMetadata) GetBackoff() *bool {
	if o == nil {
		return nil
	}
	return o.Backoff
}

func (o *DigestRegularMetadata) GetBackoffAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffAmount
}

func (o *DigestRegularMetadata) GetBackoffUnit() *BackoffUnit {
	if o == nil {
		return nil
	}
	return o.BackoffUnit
}

func (o *DigestRegularMetadata) GetUpdateMode() *bool {
	if o == nil {
		return nil
	}
	return o.UpdateMode
}
