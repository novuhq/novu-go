// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Unit string

const (
	UnitSeconds Unit = "seconds"
	UnitMinutes Unit = "minutes"
	UnitHours   Unit = "hours"
	UnitDays    Unit = "days"
	UnitWeeks   Unit = "weeks"
	UnitMonths  Unit = "months"
)

func (e Unit) ToPointer() *Unit {
	return &e
}
func (e *Unit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = Unit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Unit: %v", v)
	}
}

type Type string

const (
	TypeRegular Type = "regular"
	TypeBackoff Type = "backoff"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		fallthrough
	case "backoff":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type BackoffUnit string

const (
	BackoffUnitSeconds BackoffUnit = "seconds"
	BackoffUnitMinutes BackoffUnit = "minutes"
	BackoffUnitHours   BackoffUnit = "hours"
	BackoffUnitDays    BackoffUnit = "days"
	BackoffUnitWeeks   BackoffUnit = "weeks"
	BackoffUnitMonths  BackoffUnit = "months"
)

func (e BackoffUnit) ToPointer() *BackoffUnit {
	return &e
}
func (e *BackoffUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = BackoffUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BackoffUnit: %v", v)
	}
}

type DigestRegularMetadata struct {
	Amount        *float64     `json:"amount,omitempty"`
	Unit          *Unit        `json:"unit,omitempty"`
	DigestKey     *string      `json:"digestKey,omitempty"`
	Type          Type         `json:"type"`
	Backoff       *bool        `json:"backoff,omitempty"`
	BackoffAmount *float64     `json:"backoffAmount,omitempty"`
	BackoffUnit   *BackoffUnit `json:"backoffUnit,omitempty"`
	UpdateMode    *bool        `json:"updateMode,omitempty"`
}

func (o *DigestRegularMetadata) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *DigestRegularMetadata) GetUnit() *Unit {
	if o == nil {
		return nil
	}
	return o.Unit
}

func (o *DigestRegularMetadata) GetDigestKey() *string {
	if o == nil {
		return nil
	}
	return o.DigestKey
}

func (o *DigestRegularMetadata) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *DigestRegularMetadata) GetBackoff() *bool {
	if o == nil {
		return nil
	}
	return o.Backoff
}

func (o *DigestRegularMetadata) GetBackoffAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffAmount
}

func (o *DigestRegularMetadata) GetBackoffUnit() *BackoffUnit {
	if o == nil {
		return nil
	}
	return o.BackoffUnit
}

func (o *DigestRegularMetadata) GetUpdateMode() *bool {
	if o == nil {
		return nil
	}
	return o.UpdateMode
}
