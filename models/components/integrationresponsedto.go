// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Channel - The channel type for the integration, which defines how the integration communicates (e.g., email, SMS).
type Channel string

const (
	ChannelInApp Channel = "in_app"
	ChannelEmail Channel = "email"
	ChannelSms   Channel = "sms"
	ChannelChat  Channel = "chat"
	ChannelPush  Channel = "push"
)

func (e Channel) ToPointer() *Channel {
	return &e
}
func (e *Channel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_app":
		fallthrough
	case "email":
		fallthrough
	case "sms":
		fallthrough
	case "chat":
		fallthrough
	case "push":
		*e = Channel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Channel: %v", v)
	}
}

type IntegrationResponseDto struct {
	// The unique identifier of the integration record in the database. This is automatically generated.
	ID *string `json:"_id,omitempty"`
	// The unique identifier for the environment associated with this integration. This links to the Environment collection.
	EnvironmentID string `json:"_environmentId"`
	// The unique identifier for the organization that owns this integration. This links to the Organization collection.
	OrganizationID string `json:"_organizationId"`
	// The name of the integration, which is used to identify it in the user interface.
	Name string `json:"name"`
	// A unique string identifier for the integration, often used for API calls or internal references.
	Identifier string `json:"identifier"`
	// The identifier for the provider of the integration (e.g., "mailgun", "twilio").
	ProviderID string `json:"providerId"`
	// The channel type for the integration, which defines how the integration communicates (e.g., email, SMS).
	Channel Channel `json:"channel"`
	// The credentials required for the integration to function, including API keys and other sensitive information.
	Credentials CredentialsDto `json:"credentials"`
	// The configurations required for enabling the additional configurations of the integration.
	Configurations *ConfigurationsDto `json:"configurations,omitempty"`
	// Indicates whether the integration is currently active. An active integration will process events and messages.
	Active bool `json:"active"`
	// Indicates whether the integration has been marked as deleted (soft delete).
	Deleted bool `json:"deleted"`
	// The timestamp indicating when the integration was deleted. This is set when the integration is soft deleted.
	DeletedAt *string `json:"deletedAt,omitempty"`
	// The identifier of the user who performed the deletion of this integration. Useful for audit trails.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// Indicates whether this integration is marked as primary. A primary integration is often the default choice for processing.
	Primary bool `json:"primary"`
	// An array of conditions associated with the integration that may influence its behavior or processing logic.
	Conditions []StepFilterDto `json:"conditions,omitempty"`
}

func (i *IntegrationResponseDto) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *IntegrationResponseDto) GetEnvironmentID() string {
	if i == nil {
		return ""
	}
	return i.EnvironmentID
}

func (i *IntegrationResponseDto) GetOrganizationID() string {
	if i == nil {
		return ""
	}
	return i.OrganizationID
}

func (i *IntegrationResponseDto) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *IntegrationResponseDto) GetIdentifier() string {
	if i == nil {
		return ""
	}
	return i.Identifier
}

func (i *IntegrationResponseDto) GetProviderID() string {
	if i == nil {
		return ""
	}
	return i.ProviderID
}

func (i *IntegrationResponseDto) GetChannel() Channel {
	if i == nil {
		return Channel("")
	}
	return i.Channel
}

func (i *IntegrationResponseDto) GetCredentials() CredentialsDto {
	if i == nil {
		return CredentialsDto{}
	}
	return i.Credentials
}

func (i *IntegrationResponseDto) GetConfigurations() *ConfigurationsDto {
	if i == nil {
		return nil
	}
	return i.Configurations
}

func (i *IntegrationResponseDto) GetActive() bool {
	if i == nil {
		return false
	}
	return i.Active
}

func (i *IntegrationResponseDto) GetDeleted() bool {
	if i == nil {
		return false
	}
	return i.Deleted
}

func (i *IntegrationResponseDto) GetDeletedAt() *string {
	if i == nil {
		return nil
	}
	return i.DeletedAt
}

func (i *IntegrationResponseDto) GetDeletedBy() *string {
	if i == nil {
		return nil
	}
	return i.DeletedBy
}

func (i *IntegrationResponseDto) GetPrimary() bool {
	if i == nil {
		return false
	}
	return i.Primary
}

func (i *IntegrationResponseDto) GetConditions() []StepFilterDto {
	if i == nil {
		return nil
	}
	return i.Conditions
}
