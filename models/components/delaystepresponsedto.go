// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// DelayStepResponseDtoType - Type of the delay. Currently only 'regular' is supported by the schema.
type DelayStepResponseDtoType string

const (
	DelayStepResponseDtoTypeRegular DelayStepResponseDtoType = "regular"
)

func (e DelayStepResponseDtoType) ToPointer() *DelayStepResponseDtoType {
	return &e
}
func (e *DelayStepResponseDtoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		*e = DelayStepResponseDtoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DelayStepResponseDtoType: %v", v)
	}
}

// DelayStepResponseDtoUnit - Unit of time for the delay amount.
type DelayStepResponseDtoUnit string

const (
	DelayStepResponseDtoUnitSeconds DelayStepResponseDtoUnit = "seconds"
	DelayStepResponseDtoUnitMinutes DelayStepResponseDtoUnit = "minutes"
	DelayStepResponseDtoUnitHours   DelayStepResponseDtoUnit = "hours"
	DelayStepResponseDtoUnitDays    DelayStepResponseDtoUnit = "days"
	DelayStepResponseDtoUnitWeeks   DelayStepResponseDtoUnit = "weeks"
	DelayStepResponseDtoUnitMonths  DelayStepResponseDtoUnit = "months"
)

func (e DelayStepResponseDtoUnit) ToPointer() *DelayStepResponseDtoUnit {
	return &e
}
func (e *DelayStepResponseDtoUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = DelayStepResponseDtoUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DelayStepResponseDtoUnit: %v", v)
	}
}

// DelayStepResponseDtoControlValues - Control values for the delay step
type DelayStepResponseDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// Type of the delay. Currently only 'regular' is supported by the schema.
	Type *DelayStepResponseDtoType `default:"regular" json:"type"`
	// Amount of time to delay.
	Amount float64 `json:"amount"`
	// Unit of time for the delay amount.
	Unit                 DelayStepResponseDtoUnit `json:"unit"`
	AdditionalProperties map[string]any           `additionalProperties:"true" json:"-"`
}

func (d DelayStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DelayStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DelayStepResponseDtoControlValues) GetSkip() map[string]any {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *DelayStepResponseDtoControlValues) GetType() *DelayStepResponseDtoType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *DelayStepResponseDtoControlValues) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *DelayStepResponseDtoControlValues) GetUnit() DelayStepResponseDtoUnit {
	if o == nil {
		return DelayStepResponseDtoUnit("")
	}
	return o.Unit
}

func (o *DelayStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// DelayStepResponseDtoSlug - Slug of the step
type DelayStepResponseDtoSlug struct {
}

type DelayStepResponseDto struct {
	// Controls metadata for the delay step
	Controls DelayControlsMetadataResponseDto `json:"controls"`
	// Control values for the delay step
	ControlValues *DelayStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug DelayStepResponseDtoSlug `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the workflow
	Origin WorkflowOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (o *DelayStepResponseDto) GetControls() DelayControlsMetadataResponseDto {
	if o == nil {
		return DelayControlsMetadataResponseDto{}
	}
	return o.Controls
}

func (o *DelayStepResponseDto) GetControlValues() *DelayStepResponseDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}

func (o *DelayStepResponseDto) GetVariables() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Variables
}

func (o *DelayStepResponseDto) GetStepID() string {
	if o == nil {
		return ""
	}
	return o.StepID
}

func (o *DelayStepResponseDto) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DelayStepResponseDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DelayStepResponseDto) GetSlug() DelayStepResponseDtoSlug {
	if o == nil {
		return DelayStepResponseDtoSlug{}
	}
	return o.Slug
}

func (o *DelayStepResponseDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *DelayStepResponseDto) GetOrigin() WorkflowOriginEnum {
	if o == nil {
		return WorkflowOriginEnum("")
	}
	return o.Origin
}

func (o *DelayStepResponseDto) GetWorkflowID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowID
}

func (o *DelayStepResponseDto) GetWorkflowDatabaseID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowDatabaseID
}

func (o *DelayStepResponseDto) GetIssues() *StepIssuesDto {
	if o == nil {
		return nil
	}
	return o.Issues
}
