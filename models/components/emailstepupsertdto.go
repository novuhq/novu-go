// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type EmailStepUpsertDtoControlValuesType string

const (
	EmailStepUpsertDtoControlValuesTypeEmailControlDto EmailStepUpsertDtoControlValuesType = "EmailControlDto"
	EmailStepUpsertDtoControlValuesTypeMapOfAny        EmailStepUpsertDtoControlValuesType = "mapOfAny"
)

// EmailStepUpsertDtoControlValues - Control values for the Email step.
type EmailStepUpsertDtoControlValues struct {
	EmailControlDto *EmailControlDto `queryParam:"inline"`
	MapOfAny        map[string]any   `queryParam:"inline"`

	Type EmailStepUpsertDtoControlValuesType
}

func CreateEmailStepUpsertDtoControlValuesEmailControlDto(emailControlDto EmailControlDto) EmailStepUpsertDtoControlValues {
	typ := EmailStepUpsertDtoControlValuesTypeEmailControlDto

	return EmailStepUpsertDtoControlValues{
		EmailControlDto: &emailControlDto,
		Type:            typ,
	}
}

func CreateEmailStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) EmailStepUpsertDtoControlValues {
	typ := EmailStepUpsertDtoControlValuesTypeMapOfAny

	return EmailStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *EmailStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var emailControlDto EmailControlDto = EmailControlDto{}
	if err := utils.UnmarshalJSON(data, &emailControlDto, "", true, true); err == nil {
		u.EmailControlDto = &emailControlDto
		u.Type = EmailStepUpsertDtoControlValuesTypeEmailControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = EmailStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EmailStepUpsertDtoControlValues", string(data))
}

func (u EmailStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.EmailControlDto != nil {
		return utils.MarshalJSON(u.EmailControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type EmailStepUpsertDtoControlValues: all fields are null")
}

type EmailStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Email step.
	ControlValues *EmailStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (o *EmailStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EmailStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EmailStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *EmailStepUpsertDto) GetControlValues() *EmailStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
