// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// EmailStepUpsertDtoEditorType - Type of editor to use for the body.
type EmailStepUpsertDtoEditorType string

const (
	EmailStepUpsertDtoEditorTypeBlock EmailStepUpsertDtoEditorType = "block"
	EmailStepUpsertDtoEditorTypeHTML  EmailStepUpsertDtoEditorType = "html"
)

func (e EmailStepUpsertDtoEditorType) ToPointer() *EmailStepUpsertDtoEditorType {
	return &e
}
func (e *EmailStepUpsertDtoEditorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "html":
		*e = EmailStepUpsertDtoEditorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmailStepUpsertDtoEditorType: %v", v)
	}
}

// EmailStepUpsertDtoControlValues - Control values for the Email step
type EmailStepUpsertDtoControlValues struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// Subject of the email.
	Subject string `json:"subject"`
	// Body content of the email, either a valid Maily JSON object, or html string.
	Body *string `default:"" json:"body"`
	// Type of editor to use for the body.
	EditorType *EmailStepUpsertDtoEditorType `default:"block" json:"editorType"`
	// Disable sanitization of the output.
	DisableOutputSanitization *bool `default:"false" json:"disableOutputSanitization"`
}

func (e EmailStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmailStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EmailStepUpsertDtoControlValues) GetSkip() map[string]any {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *EmailStepUpsertDtoControlValues) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *EmailStepUpsertDtoControlValues) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *EmailStepUpsertDtoControlValues) GetEditorType() *EmailStepUpsertDtoEditorType {
	if o == nil {
		return nil
	}
	return o.EditorType
}

func (o *EmailStepUpsertDtoControlValues) GetDisableOutputSanitization() *bool {
	if o == nil {
		return nil
	}
	return o.DisableOutputSanitization
}

type EmailStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Email step
	ControlValues *EmailStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (o *EmailStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EmailStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EmailStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *EmailStepUpsertDto) GetControlValues() *EmailStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
