// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DigestTimedMetadataUnit string

const (
	DigestTimedMetadataUnitSeconds DigestTimedMetadataUnit = "seconds"
	DigestTimedMetadataUnitMinutes DigestTimedMetadataUnit = "minutes"
	DigestTimedMetadataUnitHours   DigestTimedMetadataUnit = "hours"
	DigestTimedMetadataUnitDays    DigestTimedMetadataUnit = "days"
	DigestTimedMetadataUnitWeeks   DigestTimedMetadataUnit = "weeks"
	DigestTimedMetadataUnitMonths  DigestTimedMetadataUnit = "months"
)

func (e DigestTimedMetadataUnit) ToPointer() *DigestTimedMetadataUnit {
	return &e
}
func (e *DigestTimedMetadataUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seconds":
		fallthrough
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = DigestTimedMetadataUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestTimedMetadataUnit: %v", v)
	}
}

type DigestTimedMetadataType string

const (
	DigestTimedMetadataTypeTimed DigestTimedMetadataType = "timed"
)

func (e DigestTimedMetadataType) ToPointer() *DigestTimedMetadataType {
	return &e
}
func (e *DigestTimedMetadataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "timed":
		*e = DigestTimedMetadataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DigestTimedMetadataType: %v", v)
	}
}

type DigestTimedMetadata struct {
	Amount    *float64                 `json:"amount,omitempty"`
	Unit      *DigestTimedMetadataUnit `json:"unit,omitempty"`
	DigestKey *string                  `json:"digestKey,omitempty"`
	Type      DigestTimedMetadataType  `json:"type"`
	Timed     *TimedConfig             `json:"timed,omitempty"`
}

func (o *DigestTimedMetadata) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *DigestTimedMetadata) GetUnit() *DigestTimedMetadataUnit {
	if o == nil {
		return nil
	}
	return o.Unit
}

func (o *DigestTimedMetadata) GetDigestKey() *string {
	if o == nil {
		return nil
	}
	return o.DigestKey
}

func (o *DigestTimedMetadata) GetType() DigestTimedMetadataType {
	if o == nil {
		return DigestTimedMetadataType("")
	}
	return o.Type
}

func (o *DigestTimedMetadata) GetTimed() *TimedConfig {
	if o == nil {
		return nil
	}
	return o.Timed
}
