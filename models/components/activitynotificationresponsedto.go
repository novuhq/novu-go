// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type ActivityNotificationResponseDto struct {
	// Unique identifier of the notification
	ID *string `json:"_id,omitempty"`
	// Environment ID of the notification
	EnvironmentID string `json:"_environmentId"`
	// Organization ID of the notification
	OrganizationID string `json:"_organizationId"`
	// Subscriber ID of the notification
	SubscriberID string `json:"_subscriberId"`
	// Transaction ID of the notification
	TransactionID string `json:"transactionId"`
	// Template ID of the notification
	TemplateID *string `json:"_templateId,omitempty"`
	// Digested Notification ID
	DigestedNotificationID *string `json:"_digestedNotificationId,omitempty"`
	// Creation time of the notification
	CreatedAt *string `json:"createdAt,omitempty"`
	// Last updated time of the notification
	UpdatedAt *string        `json:"updatedAt,omitempty"`
	Channels  []StepTypeEnum `json:"channels,omitempty"`
	// Subscriber of the notification
	Subscriber *ActivityNotificationSubscriberResponseDto `json:"subscriber,omitempty"`
	// Template of the notification
	Template *ActivityNotificationTemplateResponseDto `json:"template,omitempty"`
	// Jobs of the notification
	Jobs []ActivityNotificationJobResponseDto `json:"jobs,omitempty"`
	// Payload of the notification
	Payload map[string]any `json:"payload,omitempty"`
	// Tags associated with the notification
	Tags []string `json:"tags,omitempty"`
	// Controls associated with the notification
	Controls map[string]any `json:"controls,omitempty"`
	// To field for subscriber definition
	To map[string]any `json:"to,omitempty"`
	// Topics of the notification
	Topics []ActivityTopicDto `json:"topics,omitempty"`
	// Severity of the workflow
	Severity *SeverityLevelEnum `json:"severity,omitempty"`
	// Criticality of the notification
	Critical *bool `json:"critical,omitempty"`
}

func (a *ActivityNotificationResponseDto) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *ActivityNotificationResponseDto) GetEnvironmentID() string {
	if a == nil {
		return ""
	}
	return a.EnvironmentID
}

func (a *ActivityNotificationResponseDto) GetOrganizationID() string {
	if a == nil {
		return ""
	}
	return a.OrganizationID
}

func (a *ActivityNotificationResponseDto) GetSubscriberID() string {
	if a == nil {
		return ""
	}
	return a.SubscriberID
}

func (a *ActivityNotificationResponseDto) GetTransactionID() string {
	if a == nil {
		return ""
	}
	return a.TransactionID
}

func (a *ActivityNotificationResponseDto) GetTemplateID() *string {
	if a == nil {
		return nil
	}
	return a.TemplateID
}

func (a *ActivityNotificationResponseDto) GetDigestedNotificationID() *string {
	if a == nil {
		return nil
	}
	return a.DigestedNotificationID
}

func (a *ActivityNotificationResponseDto) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *ActivityNotificationResponseDto) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *ActivityNotificationResponseDto) GetChannels() []StepTypeEnum {
	if a == nil {
		return nil
	}
	return a.Channels
}

func (a *ActivityNotificationResponseDto) GetSubscriber() *ActivityNotificationSubscriberResponseDto {
	if a == nil {
		return nil
	}
	return a.Subscriber
}

func (a *ActivityNotificationResponseDto) GetTemplate() *ActivityNotificationTemplateResponseDto {
	if a == nil {
		return nil
	}
	return a.Template
}

func (a *ActivityNotificationResponseDto) GetJobs() []ActivityNotificationJobResponseDto {
	if a == nil {
		return nil
	}
	return a.Jobs
}

func (a *ActivityNotificationResponseDto) GetPayload() map[string]any {
	if a == nil {
		return nil
	}
	return a.Payload
}

func (a *ActivityNotificationResponseDto) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *ActivityNotificationResponseDto) GetControls() map[string]any {
	if a == nil {
		return nil
	}
	return a.Controls
}

func (a *ActivityNotificationResponseDto) GetTo() map[string]any {
	if a == nil {
		return nil
	}
	return a.To
}

func (a *ActivityNotificationResponseDto) GetTopics() []ActivityTopicDto {
	if a == nil {
		return nil
	}
	return a.Topics
}

func (a *ActivityNotificationResponseDto) GetSeverity() *SeverityLevelEnum {
	if a == nil {
		return nil
	}
	return a.Severity
}

func (a *ActivityNotificationResponseDto) GetCritical() *bool {
	if a == nil {
		return nil
	}
	return a.Critical
}
