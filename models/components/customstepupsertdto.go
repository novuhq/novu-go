// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type CustomStepUpsertDtoControlValuesType string

const (
	CustomStepUpsertDtoControlValuesTypeCustomControlDto CustomStepUpsertDtoControlValuesType = "CustomControlDto"
	CustomStepUpsertDtoControlValuesTypeMapOfAny         CustomStepUpsertDtoControlValuesType = "mapOfAny"
)

// CustomStepUpsertDtoControlValues - Control values for the Custom step.
type CustomStepUpsertDtoControlValues struct {
	CustomControlDto *CustomControlDto `queryParam:"inline" name:"controlValues"`
	MapOfAny         map[string]any    `queryParam:"inline" name:"controlValues"`

	Type CustomStepUpsertDtoControlValuesType
}

func CreateCustomStepUpsertDtoControlValuesCustomControlDto(customControlDto CustomControlDto) CustomStepUpsertDtoControlValues {
	typ := CustomStepUpsertDtoControlValuesTypeCustomControlDto

	return CustomStepUpsertDtoControlValues{
		CustomControlDto: &customControlDto,
		Type:             typ,
	}
}

func CreateCustomStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) CustomStepUpsertDtoControlValues {
	typ := CustomStepUpsertDtoControlValuesTypeMapOfAny

	return CustomStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *CustomStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var customControlDto CustomControlDto = CustomControlDto{}
	if err := utils.UnmarshalJSON(data, &customControlDto, "", true, nil); err == nil {
		u.CustomControlDto = &customControlDto
		u.Type = CustomStepUpsertDtoControlValuesTypeCustomControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CustomStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomStepUpsertDtoControlValues", string(data))
}

func (u CustomStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.CustomControlDto != nil {
		return utils.MarshalJSON(u.CustomControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type CustomStepUpsertDtoControlValues: all fields are null")
}

type CustomStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Custom step.
	ControlValues *CustomStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (c CustomStepUpsertDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomStepUpsertDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *CustomStepUpsertDto) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CustomStepUpsertDto) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CustomStepUpsertDto) GetType() StepTypeEnum {
	if c == nil {
		return StepTypeEnum("")
	}
	return c.Type
}

func (c *CustomStepUpsertDto) GetControlValues() *CustomStepUpsertDtoControlValues {
	if c == nil {
		return nil
	}
	return c.ControlValues
}
