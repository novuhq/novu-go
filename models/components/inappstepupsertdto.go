// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type ControlValuesType string

const (
	ControlValuesTypeInAppControlDto ControlValuesType = "InAppControlDto"
	ControlValuesTypeMapOfAny        ControlValuesType = "mapOfAny"
)

// ControlValues - Control values for the In-App step.
type ControlValues struct {
	InAppControlDto *InAppControlDto `queryParam:"inline"`
	MapOfAny        map[string]any   `queryParam:"inline"`

	Type ControlValuesType
}

func CreateControlValuesInAppControlDto(inAppControlDto InAppControlDto) ControlValues {
	typ := ControlValuesTypeInAppControlDto

	return ControlValues{
		InAppControlDto: &inAppControlDto,
		Type:            typ,
	}
}

func CreateControlValuesMapOfAny(mapOfAny map[string]any) ControlValues {
	typ := ControlValuesTypeMapOfAny

	return ControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *ControlValues) UnmarshalJSON(data []byte) error {

	var inAppControlDto InAppControlDto = InAppControlDto{}
	if err := utils.UnmarshalJSON(data, &inAppControlDto, "", true, true); err == nil {
		u.InAppControlDto = &inAppControlDto
		u.Type = ControlValuesTypeInAppControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ControlValues", string(data))
}

func (u ControlValues) MarshalJSON() ([]byte, error) {
	if u.InAppControlDto != nil {
		return utils.MarshalJSON(u.InAppControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type ControlValues: all fields are null")
}

type InAppStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the In-App step.
	ControlValues *ControlValues `json:"controlValues,omitempty"`
}

func (o *InAppStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InAppStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InAppStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *InAppStepUpsertDto) GetControlValues() *ControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
