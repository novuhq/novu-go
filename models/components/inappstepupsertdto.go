// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type InAppStepUpsertDtoControlValuesType string

const (
	InAppStepUpsertDtoControlValuesTypeInAppControlDto InAppStepUpsertDtoControlValuesType = "InAppControlDto"
	InAppStepUpsertDtoControlValuesTypeMapOfAny        InAppStepUpsertDtoControlValuesType = "mapOfAny"
)

// InAppStepUpsertDtoControlValues - Control values for the In-App step.
type InAppStepUpsertDtoControlValues struct {
	InAppControlDto *InAppControlDto `queryParam:"inline,name=controlValues"`
	MapOfAny        map[string]any   `queryParam:"inline,name=controlValues"`

	Type InAppStepUpsertDtoControlValuesType
}

func CreateInAppStepUpsertDtoControlValuesInAppControlDto(inAppControlDto InAppControlDto) InAppStepUpsertDtoControlValues {
	typ := InAppStepUpsertDtoControlValuesTypeInAppControlDto

	return InAppStepUpsertDtoControlValues{
		InAppControlDto: &inAppControlDto,
		Type:            typ,
	}
}

func CreateInAppStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) InAppStepUpsertDtoControlValues {
	typ := InAppStepUpsertDtoControlValuesTypeMapOfAny

	return InAppStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *InAppStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var inAppControlDto InAppControlDto = InAppControlDto{}
	if err := utils.UnmarshalJSON(data, &inAppControlDto, "", true, nil); err == nil {
		u.InAppControlDto = &inAppControlDto
		u.Type = InAppStepUpsertDtoControlValuesTypeInAppControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = InAppStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InAppStepUpsertDtoControlValues", string(data))
}

func (u InAppStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.InAppControlDto != nil {
		return utils.MarshalJSON(u.InAppControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type InAppStepUpsertDtoControlValues: all fields are null")
}

type InAppStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the In-App step.
	ControlValues *InAppStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (i InAppStepUpsertDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InAppStepUpsertDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "type"}); err != nil {
		return err
	}
	return nil
}

func (i *InAppStepUpsertDto) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InAppStepUpsertDto) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InAppStepUpsertDto) GetType() StepTypeEnum {
	if i == nil {
		return StepTypeEnum("")
	}
	return i.Type
}

func (i *InAppStepUpsertDto) GetControlValues() *InAppStepUpsertDtoControlValues {
	if i == nil {
		return nil
	}
	return i.ControlValues
}
