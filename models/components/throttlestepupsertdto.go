// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type ThrottleStepUpsertDtoControlValuesType string

const (
	ThrottleStepUpsertDtoControlValuesTypeThrottleControlDto ThrottleStepUpsertDtoControlValuesType = "ThrottleControlDto"
	ThrottleStepUpsertDtoControlValuesTypeMapOfAny           ThrottleStepUpsertDtoControlValuesType = "mapOfAny"
)

// ThrottleStepUpsertDtoControlValues - Control values for the Throttle step.
type ThrottleStepUpsertDtoControlValues struct {
	ThrottleControlDto *ThrottleControlDto `queryParam:"inline" name:"controlValues"`
	MapOfAny           map[string]any      `queryParam:"inline" name:"controlValues"`

	Type ThrottleStepUpsertDtoControlValuesType
}

func CreateThrottleStepUpsertDtoControlValuesThrottleControlDto(throttleControlDto ThrottleControlDto) ThrottleStepUpsertDtoControlValues {
	typ := ThrottleStepUpsertDtoControlValuesTypeThrottleControlDto

	return ThrottleStepUpsertDtoControlValues{
		ThrottleControlDto: &throttleControlDto,
		Type:               typ,
	}
}

func CreateThrottleStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) ThrottleStepUpsertDtoControlValues {
	typ := ThrottleStepUpsertDtoControlValuesTypeMapOfAny

	return ThrottleStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *ThrottleStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var throttleControlDto ThrottleControlDto = ThrottleControlDto{}
	if err := utils.UnmarshalJSON(data, &throttleControlDto, "", true, nil); err == nil {
		u.ThrottleControlDto = &throttleControlDto
		u.Type = ThrottleStepUpsertDtoControlValuesTypeThrottleControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ThrottleStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ThrottleStepUpsertDtoControlValues", string(data))
}

func (u ThrottleStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.ThrottleControlDto != nil {
		return utils.MarshalJSON(u.ThrottleControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type ThrottleStepUpsertDtoControlValues: all fields are null")
}

type ThrottleStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Throttle step.
	ControlValues *ThrottleStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (t ThrottleStepUpsertDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *ThrottleStepUpsertDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"name", "type"}); err != nil {
		return err
	}
	return nil
}

func (t *ThrottleStepUpsertDto) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *ThrottleStepUpsertDto) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *ThrottleStepUpsertDto) GetType() StepTypeEnum {
	if t == nil {
		return StepTypeEnum("")
	}
	return t.Type
}

func (t *ThrottleStepUpsertDto) GetControlValues() *ThrottleStepUpsertDtoControlValues {
	if t == nil {
		return nil
	}
	return t.ControlValues
}
