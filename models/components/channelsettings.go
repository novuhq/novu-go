// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ChannelSettingsProviderID - The provider identifier for the credentials
type ChannelSettingsProviderID string

const (
	ChannelSettingsProviderIDSlack            ChannelSettingsProviderID = "slack"
	ChannelSettingsProviderIDDiscord          ChannelSettingsProviderID = "discord"
	ChannelSettingsProviderIDMsteams          ChannelSettingsProviderID = "msteams"
	ChannelSettingsProviderIDMattermost       ChannelSettingsProviderID = "mattermost"
	ChannelSettingsProviderIDRyver            ChannelSettingsProviderID = "ryver"
	ChannelSettingsProviderIDZulip            ChannelSettingsProviderID = "zulip"
	ChannelSettingsProviderIDGrafanaOnCall    ChannelSettingsProviderID = "grafana-on-call"
	ChannelSettingsProviderIDGetstream        ChannelSettingsProviderID = "getstream"
	ChannelSettingsProviderIDRocketChat       ChannelSettingsProviderID = "rocket-chat"
	ChannelSettingsProviderIDWhatsappBusiness ChannelSettingsProviderID = "whatsapp-business"
	ChannelSettingsProviderIDFcm              ChannelSettingsProviderID = "fcm"
	ChannelSettingsProviderIDApns             ChannelSettingsProviderID = "apns"
	ChannelSettingsProviderIDExpo             ChannelSettingsProviderID = "expo"
	ChannelSettingsProviderIDOneSignal        ChannelSettingsProviderID = "one-signal"
	ChannelSettingsProviderIDPushpad          ChannelSettingsProviderID = "pushpad"
	ChannelSettingsProviderIDPushWebhook      ChannelSettingsProviderID = "push-webhook"
	ChannelSettingsProviderIDPusherBeams      ChannelSettingsProviderID = "pusher-beams"
)

func (e ChannelSettingsProviderID) ToPointer() *ChannelSettingsProviderID {
	return &e
}
func (e *ChannelSettingsProviderID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "slack":
		fallthrough
	case "discord":
		fallthrough
	case "msteams":
		fallthrough
	case "mattermost":
		fallthrough
	case "ryver":
		fallthrough
	case "zulip":
		fallthrough
	case "grafana-on-call":
		fallthrough
	case "getstream":
		fallthrough
	case "rocket-chat":
		fallthrough
	case "whatsapp-business":
		fallthrough
	case "fcm":
		fallthrough
	case "apns":
		fallthrough
	case "expo":
		fallthrough
	case "one-signal":
		fallthrough
	case "pushpad":
		fallthrough
	case "push-webhook":
		fallthrough
	case "pusher-beams":
		*e = ChannelSettingsProviderID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelSettingsProviderID: %v", v)
	}
}

type ChannelSettings struct {
	// The provider identifier for the credentials
	ProviderID ChannelSettingsProviderID `json:"providerId"`
	// The integration identifier
	IntegrationIdentifier *string `json:"integrationIdentifier,omitempty"`
	// Credentials payload for the specified provider
	Credentials ChannelCredentials `json:"credentials"`
	// The unique identifier of the integration associated with this channel.
	IntegrationID string `json:"_integrationId"`
}

func (o *ChannelSettings) GetProviderID() ChannelSettingsProviderID {
	if o == nil {
		return ChannelSettingsProviderID("")
	}
	return o.ProviderID
}

func (o *ChannelSettings) GetIntegrationIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIdentifier
}

func (o *ChannelSettings) GetCredentials() ChannelCredentials {
	if o == nil {
		return ChannelCredentials{}
	}
	return o.Credentials
}

func (o *ChannelSettings) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}
