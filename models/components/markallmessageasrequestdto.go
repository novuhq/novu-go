// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type FeedIdentifierType string

const (
	FeedIdentifierTypeStr        FeedIdentifierType = "str"
	FeedIdentifierTypeArrayOfStr FeedIdentifierType = "arrayOfStr"
)

// FeedIdentifier - Optional feed identifier or array of feed identifiers
type FeedIdentifier struct {
	Str        *string  `queryParam:"inline" name:"feedIdentifier"`
	ArrayOfStr []string `queryParam:"inline" name:"feedIdentifier"`

	Type FeedIdentifierType
}

func CreateFeedIdentifierStr(str string) FeedIdentifier {
	typ := FeedIdentifierTypeStr

	return FeedIdentifier{
		Str:  &str,
		Type: typ,
	}
}

func CreateFeedIdentifierArrayOfStr(arrayOfStr []string) FeedIdentifier {
	typ := FeedIdentifierTypeArrayOfStr

	return FeedIdentifier{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *FeedIdentifier) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = FeedIdentifierTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = FeedIdentifierTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FeedIdentifier", string(data))
}

func (u FeedIdentifier) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type FeedIdentifier: all fields are null")
}

// MarkAs - Mark all subscriber messages as read, unread, seen or unseen
type MarkAs string

const (
	MarkAsRead   MarkAs = "read"
	MarkAsSeen   MarkAs = "seen"
	MarkAsUnread MarkAs = "unread"
	MarkAsUnseen MarkAs = "unseen"
)

func (e MarkAs) ToPointer() *MarkAs {
	return &e
}
func (e *MarkAs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "read":
		fallthrough
	case "seen":
		fallthrough
	case "unread":
		fallthrough
	case "unseen":
		*e = MarkAs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MarkAs: %v", v)
	}
}

type MarkAllMessageAsRequestDto struct {
	// Optional feed identifier or array of feed identifiers
	FeedIdentifier *FeedIdentifier `json:"feedIdentifier,omitempty"`
	// Mark all subscriber messages as read, unread, seen or unseen
	MarkAs MarkAs `json:"markAs"`
}

func (m *MarkAllMessageAsRequestDto) GetFeedIdentifier() *FeedIdentifier {
	if m == nil {
		return nil
	}
	return m.FeedIdentifier
}

func (m *MarkAllMessageAsRequestDto) GetMarkAs() MarkAs {
	if m == nil {
		return MarkAs("")
	}
	return m.MarkAs
}
