// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type Placeholder5Type string

const (
	Placeholder5TypeStr      Placeholder5Type = "str"
	Placeholder5TypeNumber   Placeholder5Type = "number"
	Placeholder5TypeBoolean  Placeholder5Type = "boolean"
	Placeholder5TypeMapOfAny Placeholder5Type = "mapOfAny"
)

type Placeholder5 struct {
	Str      *string        `queryParam:"inline,name=five"`
	Number   *float64       `queryParam:"inline,name=five"`
	Boolean  *bool          `queryParam:"inline,name=five"`
	MapOfAny map[string]any `queryParam:"inline,name=five"`

	Type Placeholder5Type
}

func CreatePlaceholder5Str(str string) Placeholder5 {
	typ := Placeholder5TypeStr

	return Placeholder5{
		Str:  &str,
		Type: typ,
	}
}

func CreatePlaceholder5Number(number float64) Placeholder5 {
	typ := Placeholder5TypeNumber

	return Placeholder5{
		Number: &number,
		Type:   typ,
	}
}

func CreatePlaceholder5Boolean(boolean bool) Placeholder5 {
	typ := Placeholder5TypeBoolean

	return Placeholder5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePlaceholder5MapOfAny(mapOfAny map[string]any) Placeholder5 {
	typ := Placeholder5TypeMapOfAny

	return Placeholder5{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *Placeholder5) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = Placeholder5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = Placeholder5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = Placeholder5TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = Placeholder5TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Placeholder5", string(data))
}

func (u Placeholder5) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Placeholder5: all fields are null")
}

type PlaceholderType string

const (
	PlaceholderTypeStr                 PlaceholderType = "str"
	PlaceholderTypeNumber              PlaceholderType = "number"
	PlaceholderTypeBoolean             PlaceholderType = "boolean"
	PlaceholderTypeMapOfAny            PlaceholderType = "mapOfAny"
	PlaceholderTypeArrayOfPlaceholder5 PlaceholderType = "arrayOfPlaceholder5"
)

// Placeholder for the UI Schema Property
type Placeholder struct {
	Str                 *string        `queryParam:"inline,name=placeholder"`
	Number              *float64       `queryParam:"inline,name=placeholder"`
	Boolean             *bool          `queryParam:"inline,name=placeholder"`
	MapOfAny            map[string]any `queryParam:"inline,name=placeholder"`
	ArrayOfPlaceholder5 []Placeholder5 `queryParam:"inline,name=placeholder"`

	Type PlaceholderType
}

func CreatePlaceholderStr(str string) Placeholder {
	typ := PlaceholderTypeStr

	return Placeholder{
		Str:  &str,
		Type: typ,
	}
}

func CreatePlaceholderNumber(number float64) Placeholder {
	typ := PlaceholderTypeNumber

	return Placeholder{
		Number: &number,
		Type:   typ,
	}
}

func CreatePlaceholderBoolean(boolean bool) Placeholder {
	typ := PlaceholderTypeBoolean

	return Placeholder{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePlaceholderMapOfAny(mapOfAny map[string]any) Placeholder {
	typ := PlaceholderTypeMapOfAny

	return Placeholder{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreatePlaceholderArrayOfPlaceholder5(arrayOfPlaceholder5 []Placeholder5) Placeholder {
	typ := PlaceholderTypeArrayOfPlaceholder5

	return Placeholder{
		ArrayOfPlaceholder5: arrayOfPlaceholder5,
		Type:                typ,
	}
}

func (u *Placeholder) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = PlaceholderTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = PlaceholderTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = PlaceholderTypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = PlaceholderTypeMapOfAny
		return nil
	}

	var arrayOfPlaceholder5 []Placeholder5 = []Placeholder5{}
	if err := utils.UnmarshalJSON(data, &arrayOfPlaceholder5, "", true, nil); err == nil {
		u.ArrayOfPlaceholder5 = arrayOfPlaceholder5
		u.Type = PlaceholderTypeArrayOfPlaceholder5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Placeholder", string(data))
}

func (u Placeholder) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfPlaceholder5 != nil {
		return utils.MarshalJSON(u.ArrayOfPlaceholder5, "", true)
	}

	return nil, errors.New("could not marshal union type Placeholder: all fields are null")
}

type UISchemaProperty struct {
	// Placeholder for the UI Schema Property
	Placeholder *Placeholder `json:"placeholder,omitempty"`
	// Component type for the UI Schema Property
	Component UIComponentEnum `json:"component"`
	// Properties of the UI Schema
	Properties map[string]UISchemaProperty `json:"properties,omitempty"`
}

func (u UISchemaProperty) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UISchemaProperty) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"component"}); err != nil {
		return err
	}
	return nil
}

func (u *UISchemaProperty) GetPlaceholder() *Placeholder {
	if u == nil {
		return nil
	}
	return u.Placeholder
}

func (u *UISchemaProperty) GetComponent() UIComponentEnum {
	if u == nil {
		return UIComponentEnum("")
	}
	return u.Component
}

func (u *UISchemaProperty) GetProperties() map[string]UISchemaProperty {
	if u == nil {
		return nil
	}
	return u.Properties
}
