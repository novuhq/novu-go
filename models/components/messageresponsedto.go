// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type ContentType string

const (
	ContentTypeEmailBlock ContentType = "EmailBlock"
	ContentTypeStr        ContentType = "str"
)

// Content of the message, can be an email block or a string
type Content struct {
	EmailBlock *EmailBlock `queryParam:"inline"`
	Str        *string     `queryParam:"inline"`

	Type ContentType
}

func CreateContentEmailBlock(emailBlock EmailBlock) Content {
	typ := ContentTypeEmailBlock

	return Content{
		EmailBlock: &emailBlock,
		Type:       typ,
	}
}

func CreateContentStr(str string) Content {
	typ := ContentTypeStr

	return Content{
		Str:  &str,
		Type: typ,
	}
}

func (u *Content) UnmarshalJSON(data []byte) error {

	var emailBlock EmailBlock = EmailBlock{}
	if err := utils.UnmarshalJSON(data, &emailBlock, "", true, true); err == nil {
		u.EmailBlock = &emailBlock
		u.Type = ContentTypeEmailBlock
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ContentTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Content", string(data))
}

func (u Content) MarshalJSON() ([]byte, error) {
	if u.EmailBlock != nil {
		return utils.MarshalJSON(u.EmailBlock, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type Content: all fields are null")
}

// MessageResponseDtoPayload - The payload that was used to send the notification trigger
type MessageResponseDtoPayload struct {
}

// MessageResponseDtoOverrides - Provider specific overrides used when triggering the notification
type MessageResponseDtoOverrides struct {
}

type MessageResponseDto struct {
	// Unique identifier for the message
	ID *string `json:"_id,omitempty"`
	// Template ID associated with the message
	TemplateID string `json:"_templateId"`
	// Environment ID where the message is sent
	EnvironmentID string `json:"_environmentId"`
	// Message template ID
	MessageTemplateID string `json:"_messageTemplateId"`
	// Organization ID associated with the message
	OrganizationID string `json:"_organizationId"`
	// Notification ID associated with the message
	NotificationID string `json:"_notificationId"`
	// Subscriber ID associated with the message
	SubscriberID string `json:"_subscriberId"`
	// Subscriber details, if available
	Subscriber *SubscriberResponseDto `json:"subscriber,omitempty"`
	// Workflow template associated with the message
	Template *WorkflowResponse `json:"template,omitempty"`
	// Identifier for the message template
	TemplateIdentifier *string `json:"templateIdentifier,omitempty"`
	// Creation date of the message
	CreatedAt string `json:"createdAt"`
	// Last seen date of the message, if available
	LastSeenDate *string `json:"lastSeenDate,omitempty"`
	// Last read date of the message, if available
	LastReadDate *string `json:"lastReadDate,omitempty"`
	// Content of the message, can be an email block or a string
	Content Content `json:"content"`
	// Transaction ID associated with the message
	TransactionID string `json:"transactionId"`
	// Subject of the message, if applicable
	Subject *string `json:"subject,omitempty"`
	// Channel type through which the message is sent
	Channel ChannelTypeEnum `json:"channel"`
	// Indicates if the message has been read
	Read bool `json:"read"`
	// Indicates if the message has been seen
	Seen bool `json:"seen"`
	// Email address associated with the message, if applicable
	Email *string `json:"email,omitempty"`
	// Phone number associated with the message, if applicable
	Phone *string `json:"phone,omitempty"`
	// Direct webhook URL for the message, if applicable
	DirectWebhookURL *string `json:"directWebhookUrl,omitempty"`
	// Provider ID associated with the message, if applicable
	ProviderID *string `json:"providerId,omitempty"`
	// Device tokens associated with the message, if applicable
	DeviceTokens []string `json:"deviceTokens,omitempty"`
	// Title of the message, if applicable
	Title *string `json:"title,omitempty"`
	// Call to action associated with the message
	Cta MessageCTA `json:"cta"`
	// Feed ID associated with the message, if applicable
	FeedID *string `json:"_feedId,omitempty"`
	// Status of the message
	Status MessageStatusEnum `json:"status"`
	// Error ID if the message has an error
	ErrorID *string `json:"errorId,omitempty"`
	// Error text if the message has an error
	ErrorText *string `json:"errorText,omitempty"`
	// The payload that was used to send the notification trigger
	Payload *MessageResponseDtoPayload `json:"payload,omitempty"`
	// Provider specific overrides used when triggering the notification
	Overrides *MessageResponseDtoOverrides `json:"overrides,omitempty"`
}

func (o *MessageResponseDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MessageResponseDto) GetTemplateID() string {
	if o == nil {
		return ""
	}
	return o.TemplateID
}

func (o *MessageResponseDto) GetEnvironmentID() string {
	if o == nil {
		return ""
	}
	return o.EnvironmentID
}

func (o *MessageResponseDto) GetMessageTemplateID() string {
	if o == nil {
		return ""
	}
	return o.MessageTemplateID
}

func (o *MessageResponseDto) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *MessageResponseDto) GetNotificationID() string {
	if o == nil {
		return ""
	}
	return o.NotificationID
}

func (o *MessageResponseDto) GetSubscriberID() string {
	if o == nil {
		return ""
	}
	return o.SubscriberID
}

func (o *MessageResponseDto) GetSubscriber() *SubscriberResponseDto {
	if o == nil {
		return nil
	}
	return o.Subscriber
}

func (o *MessageResponseDto) GetTemplate() *WorkflowResponse {
	if o == nil {
		return nil
	}
	return o.Template
}

func (o *MessageResponseDto) GetTemplateIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.TemplateIdentifier
}

func (o *MessageResponseDto) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *MessageResponseDto) GetLastSeenDate() *string {
	if o == nil {
		return nil
	}
	return o.LastSeenDate
}

func (o *MessageResponseDto) GetLastReadDate() *string {
	if o == nil {
		return nil
	}
	return o.LastReadDate
}

func (o *MessageResponseDto) GetContent() Content {
	if o == nil {
		return Content{}
	}
	return o.Content
}

func (o *MessageResponseDto) GetTransactionID() string {
	if o == nil {
		return ""
	}
	return o.TransactionID
}

func (o *MessageResponseDto) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *MessageResponseDto) GetChannel() ChannelTypeEnum {
	if o == nil {
		return ChannelTypeEnum("")
	}
	return o.Channel
}

func (o *MessageResponseDto) GetRead() bool {
	if o == nil {
		return false
	}
	return o.Read
}

func (o *MessageResponseDto) GetSeen() bool {
	if o == nil {
		return false
	}
	return o.Seen
}

func (o *MessageResponseDto) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *MessageResponseDto) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *MessageResponseDto) GetDirectWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.DirectWebhookURL
}

func (o *MessageResponseDto) GetProviderID() *string {
	if o == nil {
		return nil
	}
	return o.ProviderID
}

func (o *MessageResponseDto) GetDeviceTokens() []string {
	if o == nil {
		return nil
	}
	return o.DeviceTokens
}

func (o *MessageResponseDto) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *MessageResponseDto) GetCta() MessageCTA {
	if o == nil {
		return MessageCTA{}
	}
	return o.Cta
}

func (o *MessageResponseDto) GetFeedID() *string {
	if o == nil {
		return nil
	}
	return o.FeedID
}

func (o *MessageResponseDto) GetStatus() MessageStatusEnum {
	if o == nil {
		return MessageStatusEnum("")
	}
	return o.Status
}

func (o *MessageResponseDto) GetErrorID() *string {
	if o == nil {
		return nil
	}
	return o.ErrorID
}

func (o *MessageResponseDto) GetErrorText() *string {
	if o == nil {
		return nil
	}
	return o.ErrorText
}

func (o *MessageResponseDto) GetPayload() *MessageResponseDtoPayload {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *MessageResponseDto) GetOverrides() *MessageResponseDtoOverrides {
	if o == nil {
		return nil
	}
	return o.Overrides
}
