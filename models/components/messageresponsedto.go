// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type MessageResponseDtoContentType string

const (
	MessageResponseDtoContentTypeArrayOfEmailBlock MessageResponseDtoContentType = "arrayOfEmailBlock"
	MessageResponseDtoContentTypeStr               MessageResponseDtoContentType = "str"
)

// MessageResponseDtoContent - Content of the message, can be an email block or a string
type MessageResponseDtoContent struct {
	ArrayOfEmailBlock []EmailBlock `queryParam:"inline,name=content"`
	Str               *string      `queryParam:"inline,name=content"`

	Type MessageResponseDtoContentType
}

func CreateMessageResponseDtoContentArrayOfEmailBlock(arrayOfEmailBlock []EmailBlock) MessageResponseDtoContent {
	typ := MessageResponseDtoContentTypeArrayOfEmailBlock

	return MessageResponseDtoContent{
		ArrayOfEmailBlock: arrayOfEmailBlock,
		Type:              typ,
	}
}

func CreateMessageResponseDtoContentStr(str string) MessageResponseDtoContent {
	typ := MessageResponseDtoContentTypeStr

	return MessageResponseDtoContent{
		Str:  &str,
		Type: typ,
	}
}

func (u *MessageResponseDtoContent) UnmarshalJSON(data []byte) error {

	var arrayOfEmailBlock []EmailBlock = []EmailBlock{}
	if err := utils.UnmarshalJSON(data, &arrayOfEmailBlock, "", true, nil); err == nil {
		u.ArrayOfEmailBlock = arrayOfEmailBlock
		u.Type = MessageResponseDtoContentTypeArrayOfEmailBlock
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = MessageResponseDtoContentTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MessageResponseDtoContent", string(data))
}

func (u MessageResponseDtoContent) MarshalJSON() ([]byte, error) {
	if u.ArrayOfEmailBlock != nil {
		return utils.MarshalJSON(u.ArrayOfEmailBlock, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MessageResponseDtoContent: all fields are null")
}

// MessageResponseDtoPayload - The payload that was used to send the notification trigger
type MessageResponseDtoPayload struct {
}

// MessageResponseDtoOverrides - Provider specific overrides used when triggering the notification
type MessageResponseDtoOverrides struct {
}

type MessageResponseDto struct {
	// Unique identifier for the message
	ID *string `json:"_id,omitempty"`
	// Template ID associated with the message
	TemplateID *string `json:"_templateId,omitempty"`
	// Environment ID where the message is sent
	EnvironmentID string `json:"_environmentId"`
	// Message template ID
	MessageTemplateID *string `json:"_messageTemplateId,omitempty"`
	// Organization ID associated with the message
	OrganizationID string `json:"_organizationId"`
	// Notification ID associated with the message
	NotificationID string `json:"_notificationId"`
	// Subscriber ID associated with the message
	SubscriberID string `json:"_subscriberId"`
	// Subscriber details, if available
	Subscriber *SubscriberResponseDto `json:"subscriber,omitempty"`
	// Workflow template associated with the message
	Template *WorkflowResponse `json:"template,omitempty"`
	// Identifier for the message template
	TemplateIdentifier *string `json:"templateIdentifier,omitempty"`
	// Creation date of the message
	CreatedAt string `json:"createdAt"`
	// Array of delivery dates for the message, if the message has multiple delivery dates, for example after being snoozed
	DeliveredAt []string `json:"deliveredAt,omitempty"`
	// Last seen date of the message, if available
	LastSeenDate *string `json:"lastSeenDate,omitempty"`
	// Last read date of the message, if available
	LastReadDate *string `json:"lastReadDate,omitempty"`
	// Content of the message, can be an email block or a string
	Content *MessageResponseDtoContent `json:"content,omitempty"`
	// Transaction ID associated with the message
	TransactionID string `json:"transactionId"`
	// Subject of the message, if applicable
	Subject *string `json:"subject,omitempty"`
	// Channel type through which the message is sent
	Channel ChannelTypeEnum `json:"channel"`
	// Indicates if the message has been read
	Read bool `json:"read"`
	// Indicates if the message has been seen
	Seen bool `json:"seen"`
	// Date when the message will be unsnoozed
	SnoozedUntil *string `json:"snoozedUntil,omitempty"`
	// Email address associated with the message, if applicable
	Email *string `json:"email,omitempty"`
	// Phone number associated with the message, if applicable
	Phone *string `json:"phone,omitempty"`
	// Direct webhook URL for the message, if applicable
	DirectWebhookURL *string `json:"directWebhookUrl,omitempty"`
	// Provider ID associated with the message, if applicable
	ProviderID *string `json:"providerId,omitempty"`
	// Device tokens associated with the message, if applicable
	DeviceTokens []string `json:"deviceTokens,omitempty"`
	// Title of the message, if applicable
	Title *string `json:"title,omitempty"`
	// Call to action associated with the message
	Cta MessageCTA `json:"cta"`
	// Feed ID associated with the message, if applicable
	FeedID *string `json:"_feedId,omitempty"`
	// Status of the message
	Status MessageStatusEnum `json:"status"`
	// Error ID if the message has an error
	ErrorID *string `json:"errorId,omitempty"`
	// Error text if the message has an error
	ErrorText *string `json:"errorText,omitempty"`
	// The payload that was used to send the notification trigger
	Payload *MessageResponseDtoPayload `json:"payload,omitempty"`
	// Provider specific overrides used when triggering the notification
	Overrides *MessageResponseDtoOverrides `json:"overrides,omitempty"`
	// Context keys associated with the message (format: "type:id")
	ContextKeys []string `json:"contextKeys,omitempty"`
}

func (m *MessageResponseDto) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *MessageResponseDto) GetTemplateID() *string {
	if m == nil {
		return nil
	}
	return m.TemplateID
}

func (m *MessageResponseDto) GetEnvironmentID() string {
	if m == nil {
		return ""
	}
	return m.EnvironmentID
}

func (m *MessageResponseDto) GetMessageTemplateID() *string {
	if m == nil {
		return nil
	}
	return m.MessageTemplateID
}

func (m *MessageResponseDto) GetOrganizationID() string {
	if m == nil {
		return ""
	}
	return m.OrganizationID
}

func (m *MessageResponseDto) GetNotificationID() string {
	if m == nil {
		return ""
	}
	return m.NotificationID
}

func (m *MessageResponseDto) GetSubscriberID() string {
	if m == nil {
		return ""
	}
	return m.SubscriberID
}

func (m *MessageResponseDto) GetSubscriber() *SubscriberResponseDto {
	if m == nil {
		return nil
	}
	return m.Subscriber
}

func (m *MessageResponseDto) GetTemplate() *WorkflowResponse {
	if m == nil {
		return nil
	}
	return m.Template
}

func (m *MessageResponseDto) GetTemplateIdentifier() *string {
	if m == nil {
		return nil
	}
	return m.TemplateIdentifier
}

func (m *MessageResponseDto) GetCreatedAt() string {
	if m == nil {
		return ""
	}
	return m.CreatedAt
}

func (m *MessageResponseDto) GetDeliveredAt() []string {
	if m == nil {
		return nil
	}
	return m.DeliveredAt
}

func (m *MessageResponseDto) GetLastSeenDate() *string {
	if m == nil {
		return nil
	}
	return m.LastSeenDate
}

func (m *MessageResponseDto) GetLastReadDate() *string {
	if m == nil {
		return nil
	}
	return m.LastReadDate
}

func (m *MessageResponseDto) GetContent() *MessageResponseDtoContent {
	if m == nil {
		return nil
	}
	return m.Content
}

func (m *MessageResponseDto) GetTransactionID() string {
	if m == nil {
		return ""
	}
	return m.TransactionID
}

func (m *MessageResponseDto) GetSubject() *string {
	if m == nil {
		return nil
	}
	return m.Subject
}

func (m *MessageResponseDto) GetChannel() ChannelTypeEnum {
	if m == nil {
		return ChannelTypeEnum("")
	}
	return m.Channel
}

func (m *MessageResponseDto) GetRead() bool {
	if m == nil {
		return false
	}
	return m.Read
}

func (m *MessageResponseDto) GetSeen() bool {
	if m == nil {
		return false
	}
	return m.Seen
}

func (m *MessageResponseDto) GetSnoozedUntil() *string {
	if m == nil {
		return nil
	}
	return m.SnoozedUntil
}

func (m *MessageResponseDto) GetEmail() *string {
	if m == nil {
		return nil
	}
	return m.Email
}

func (m *MessageResponseDto) GetPhone() *string {
	if m == nil {
		return nil
	}
	return m.Phone
}

func (m *MessageResponseDto) GetDirectWebhookURL() *string {
	if m == nil {
		return nil
	}
	return m.DirectWebhookURL
}

func (m *MessageResponseDto) GetProviderID() *string {
	if m == nil {
		return nil
	}
	return m.ProviderID
}

func (m *MessageResponseDto) GetDeviceTokens() []string {
	if m == nil {
		return nil
	}
	return m.DeviceTokens
}

func (m *MessageResponseDto) GetTitle() *string {
	if m == nil {
		return nil
	}
	return m.Title
}

func (m *MessageResponseDto) GetCta() MessageCTA {
	if m == nil {
		return MessageCTA{}
	}
	return m.Cta
}

func (m *MessageResponseDto) GetFeedID() *string {
	if m == nil {
		return nil
	}
	return m.FeedID
}

func (m *MessageResponseDto) GetStatus() MessageStatusEnum {
	if m == nil {
		return MessageStatusEnum("")
	}
	return m.Status
}

func (m *MessageResponseDto) GetErrorID() *string {
	if m == nil {
		return nil
	}
	return m.ErrorID
}

func (m *MessageResponseDto) GetErrorText() *string {
	if m == nil {
		return nil
	}
	return m.ErrorText
}

func (m *MessageResponseDto) GetPayload() *MessageResponseDtoPayload {
	if m == nil {
		return nil
	}
	return m.Payload
}

func (m *MessageResponseDto) GetOverrides() *MessageResponseDtoOverrides {
	if m == nil {
		return nil
	}
	return m.Overrides
}

func (m *MessageResponseDto) GetContextKeys() []string {
	if m == nil {
		return nil
	}
	return m.ContextKeys
}
