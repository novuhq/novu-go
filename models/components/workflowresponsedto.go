// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// Slug of the workflow
type Slug struct {
}

type WorkflowResponseDtoStepsType string

const (
	WorkflowResponseDtoStepsTypeInApp  WorkflowResponseDtoStepsType = "in_app"
	WorkflowResponseDtoStepsTypeEmail  WorkflowResponseDtoStepsType = "email"
	WorkflowResponseDtoStepsTypeSms    WorkflowResponseDtoStepsType = "sms"
	WorkflowResponseDtoStepsTypePush   WorkflowResponseDtoStepsType = "push"
	WorkflowResponseDtoStepsTypeChat   WorkflowResponseDtoStepsType = "chat"
	WorkflowResponseDtoStepsTypeDelay  WorkflowResponseDtoStepsType = "delay"
	WorkflowResponseDtoStepsTypeDigest WorkflowResponseDtoStepsType = "digest"
	WorkflowResponseDtoStepsTypeCustom WorkflowResponseDtoStepsType = "custom"
)

type WorkflowResponseDtoSteps struct {
	InAppStepResponseDto  *InAppStepResponseDto  `queryParam:"inline"`
	EmailStepResponseDto  *EmailStepResponseDto  `queryParam:"inline"`
	SmsStepResponseDto    *SmsStepResponseDto    `queryParam:"inline"`
	PushStepResponseDto   *PushStepResponseDto   `queryParam:"inline"`
	ChatStepResponseDto   *ChatStepResponseDto   `queryParam:"inline"`
	DelayStepResponseDto  *DelayStepResponseDto  `queryParam:"inline"`
	DigestStepResponseDto *DigestStepResponseDto `queryParam:"inline"`
	CustomStepResponseDto *CustomStepResponseDto `queryParam:"inline"`

	Type WorkflowResponseDtoStepsType
}

func CreateWorkflowResponseDtoStepsInApp(inApp InAppStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeInApp

	typStr := StepTypeEnum(typ)
	inApp.Type = typStr

	return WorkflowResponseDtoSteps{
		InAppStepResponseDto: &inApp,
		Type:                 typ,
	}
}

func CreateWorkflowResponseDtoStepsEmail(email EmailStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeEmail

	typStr := StepTypeEnum(typ)
	email.Type = typStr

	return WorkflowResponseDtoSteps{
		EmailStepResponseDto: &email,
		Type:                 typ,
	}
}

func CreateWorkflowResponseDtoStepsSms(sms SmsStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeSms

	typStr := StepTypeEnum(typ)
	sms.Type = typStr

	return WorkflowResponseDtoSteps{
		SmsStepResponseDto: &sms,
		Type:               typ,
	}
}

func CreateWorkflowResponseDtoStepsPush(push PushStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypePush

	typStr := StepTypeEnum(typ)
	push.Type = typStr

	return WorkflowResponseDtoSteps{
		PushStepResponseDto: &push,
		Type:                typ,
	}
}

func CreateWorkflowResponseDtoStepsChat(chat ChatStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeChat

	typStr := StepTypeEnum(typ)
	chat.Type = typStr

	return WorkflowResponseDtoSteps{
		ChatStepResponseDto: &chat,
		Type:                typ,
	}
}

func CreateWorkflowResponseDtoStepsDelay(delay DelayStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeDelay

	typStr := StepTypeEnum(typ)
	delay.Type = typStr

	return WorkflowResponseDtoSteps{
		DelayStepResponseDto: &delay,
		Type:                 typ,
	}
}

func CreateWorkflowResponseDtoStepsDigest(digest DigestStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeDigest

	typStr := StepTypeEnum(typ)
	digest.Type = typStr

	return WorkflowResponseDtoSteps{
		DigestStepResponseDto: &digest,
		Type:                  typ,
	}
}

func CreateWorkflowResponseDtoStepsCustom(custom CustomStepResponseDto) WorkflowResponseDtoSteps {
	typ := WorkflowResponseDtoStepsTypeCustom

	typStr := StepTypeEnum(typ)
	custom.Type = typStr

	return WorkflowResponseDtoSteps{
		CustomStepResponseDto: &custom,
		Type:                  typ,
	}
}

func (u *WorkflowResponseDtoSteps) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "in_app":
		inAppStepResponseDto := new(InAppStepResponseDto)
		if err := utils.UnmarshalJSON(data, &inAppStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == in_app) type InAppStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.InAppStepResponseDto = inAppStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeInApp
		return nil
	case "email":
		emailStepResponseDto := new(EmailStepResponseDto)
		if err := utils.UnmarshalJSON(data, &emailStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == email) type EmailStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.EmailStepResponseDto = emailStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeEmail
		return nil
	case "sms":
		smsStepResponseDto := new(SmsStepResponseDto)
		if err := utils.UnmarshalJSON(data, &smsStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sms) type SmsStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.SmsStepResponseDto = smsStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeSms
		return nil
	case "push":
		pushStepResponseDto := new(PushStepResponseDto)
		if err := utils.UnmarshalJSON(data, &pushStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == push) type PushStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.PushStepResponseDto = pushStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypePush
		return nil
	case "chat":
		chatStepResponseDto := new(ChatStepResponseDto)
		if err := utils.UnmarshalJSON(data, &chatStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == chat) type ChatStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.ChatStepResponseDto = chatStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeChat
		return nil
	case "delay":
		delayStepResponseDto := new(DelayStepResponseDto)
		if err := utils.UnmarshalJSON(data, &delayStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == delay) type DelayStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.DelayStepResponseDto = delayStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeDelay
		return nil
	case "digest":
		digestStepResponseDto := new(DigestStepResponseDto)
		if err := utils.UnmarshalJSON(data, &digestStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == digest) type DigestStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.DigestStepResponseDto = digestStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeDigest
		return nil
	case "custom":
		customStepResponseDto := new(CustomStepResponseDto)
		if err := utils.UnmarshalJSON(data, &customStepResponseDto, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == custom) type CustomStepResponseDto within WorkflowResponseDtoSteps: %w", string(data), err)
		}

		u.CustomStepResponseDto = customStepResponseDto
		u.Type = WorkflowResponseDtoStepsTypeCustom
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for WorkflowResponseDtoSteps", string(data))
}

func (u WorkflowResponseDtoSteps) MarshalJSON() ([]byte, error) {
	if u.InAppStepResponseDto != nil {
		return utils.MarshalJSON(u.InAppStepResponseDto, "", true)
	}

	if u.EmailStepResponseDto != nil {
		return utils.MarshalJSON(u.EmailStepResponseDto, "", true)
	}

	if u.SmsStepResponseDto != nil {
		return utils.MarshalJSON(u.SmsStepResponseDto, "", true)
	}

	if u.PushStepResponseDto != nil {
		return utils.MarshalJSON(u.PushStepResponseDto, "", true)
	}

	if u.ChatStepResponseDto != nil {
		return utils.MarshalJSON(u.ChatStepResponseDto, "", true)
	}

	if u.DelayStepResponseDto != nil {
		return utils.MarshalJSON(u.DelayStepResponseDto, "", true)
	}

	if u.DigestStepResponseDto != nil {
		return utils.MarshalJSON(u.DigestStepResponseDto, "", true)
	}

	if u.CustomStepResponseDto != nil {
		return utils.MarshalJSON(u.CustomStepResponseDto, "", true)
	}

	return nil, errors.New("could not marshal union type WorkflowResponseDtoSteps: all fields are null")
}

type WorkflowResponseDto struct {
	// Name of the workflow
	Name string `json:"name"`
	// Description of the workflow
	Description *string `json:"description,omitempty"`
	// Tags associated with the workflow
	Tags []string `json:"tags,omitempty"`
	// Whether the workflow is active
	Active *bool `default:"false" json:"active"`
	// Unique identifier of the workflow
	ID string `json:"_id"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Slug of the workflow
	Slug Slug `json:"slug"`
	// Last updated timestamp
	UpdatedAt string `json:"updatedAt"`
	// Creation timestamp
	CreatedAt string `json:"createdAt"`
	// Steps of the workflow
	Steps []WorkflowResponseDtoSteps `json:"steps"`
	// Origin of the workflow
	Origin WorkflowOriginEnum `json:"origin"`
	// Preferences for the workflow
	Preferences WorkflowPreferencesResponseDto `json:"preferences"`
	// Status of the workflow
	Status WorkflowStatusEnum `json:"status"`
	// Runtime issues for workflow creation and update
	Issues map[string]RuntimeIssueDto `json:"issues,omitempty"`
	// Timestamp of the last workflow trigger
	LastTriggeredAt *string `json:"lastTriggeredAt,omitempty"`
	// The payload JSON Schema for the workflow
	PayloadSchema map[string]any `json:"payloadSchema,omitempty"`
	// Generated payload example based on the payload schema
	PayloadExample map[string]any `json:"payloadExample,omitempty"`
	// Whether payload schema validation is enabled
	ValidatePayload *bool `json:"validatePayload,omitempty"`
}

func (w WorkflowResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkflowResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WorkflowResponseDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *WorkflowResponseDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *WorkflowResponseDto) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *WorkflowResponseDto) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *WorkflowResponseDto) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WorkflowResponseDto) GetWorkflowID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowID
}

func (o *WorkflowResponseDto) GetSlug() Slug {
	if o == nil {
		return Slug{}
	}
	return o.Slug
}

func (o *WorkflowResponseDto) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *WorkflowResponseDto) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *WorkflowResponseDto) GetSteps() []WorkflowResponseDtoSteps {
	if o == nil {
		return []WorkflowResponseDtoSteps{}
	}
	return o.Steps
}

func (o *WorkflowResponseDto) GetOrigin() WorkflowOriginEnum {
	if o == nil {
		return WorkflowOriginEnum("")
	}
	return o.Origin
}

func (o *WorkflowResponseDto) GetPreferences() WorkflowPreferencesResponseDto {
	if o == nil {
		return WorkflowPreferencesResponseDto{}
	}
	return o.Preferences
}

func (o *WorkflowResponseDto) GetStatus() WorkflowStatusEnum {
	if o == nil {
		return WorkflowStatusEnum("")
	}
	return o.Status
}

func (o *WorkflowResponseDto) GetIssues() map[string]RuntimeIssueDto {
	if o == nil {
		return nil
	}
	return o.Issues
}

func (o *WorkflowResponseDto) GetLastTriggeredAt() *string {
	if o == nil {
		return nil
	}
	return o.LastTriggeredAt
}

func (o *WorkflowResponseDto) GetPayloadSchema() map[string]any {
	if o == nil {
		return nil
	}
	return o.PayloadSchema
}

func (o *WorkflowResponseDto) GetPayloadExample() map[string]any {
	if o == nil {
		return nil
	}
	return o.PayloadExample
}

func (o *WorkflowResponseDto) GetValidatePayload() *bool {
	if o == nil {
		return nil
	}
	return o.ValidatePayload
}
