// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type DigestStepUpsertDtoControlValuesType string

const (
	DigestStepUpsertDtoControlValuesTypeDigestControlDto DigestStepUpsertDtoControlValuesType = "DigestControlDto"
	DigestStepUpsertDtoControlValuesTypeMapOfAny         DigestStepUpsertDtoControlValuesType = "mapOfAny"
)

// DigestStepUpsertDtoControlValues - Control values for the Digest step.
type DigestStepUpsertDtoControlValues struct {
	DigestControlDto *DigestControlDto `queryParam:"inline"`
	MapOfAny         map[string]any    `queryParam:"inline"`

	Type DigestStepUpsertDtoControlValuesType
}

func CreateDigestStepUpsertDtoControlValuesDigestControlDto(digestControlDto DigestControlDto) DigestStepUpsertDtoControlValues {
	typ := DigestStepUpsertDtoControlValuesTypeDigestControlDto

	return DigestStepUpsertDtoControlValues{
		DigestControlDto: &digestControlDto,
		Type:             typ,
	}
}

func CreateDigestStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) DigestStepUpsertDtoControlValues {
	typ := DigestStepUpsertDtoControlValuesTypeMapOfAny

	return DigestStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *DigestStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var digestControlDto DigestControlDto = DigestControlDto{}
	if err := utils.UnmarshalJSON(data, &digestControlDto, "", true, true); err == nil {
		u.DigestControlDto = &digestControlDto
		u.Type = DigestStepUpsertDtoControlValuesTypeDigestControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = DigestStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DigestStepUpsertDtoControlValues", string(data))
}

func (u DigestStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.DigestControlDto != nil {
		return utils.MarshalJSON(u.DigestControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type DigestStepUpsertDtoControlValues: all fields are null")
}

type DigestStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Digest step.
	ControlValues *DigestStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (o *DigestStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DigestStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DigestStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *DigestStepUpsertDto) GetControlValues() *DigestStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
