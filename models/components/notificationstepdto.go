// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type MetadataType string

const (
	MetadataTypeDigestRegularMetadata  MetadataType = "DigestRegularMetadata"
	MetadataTypeDigestTimedMetadata    MetadataType = "DigestTimedMetadata"
	MetadataTypeDelayRegularMetadata   MetadataType = "DelayRegularMetadata"
	MetadataTypeDelayScheduledMetadata MetadataType = "DelayScheduledMetadata"
)

// Metadata associated with the workflow step. Can vary based on the type of step.
type Metadata struct {
	DigestRegularMetadata  *DigestRegularMetadata  `queryParam:"inline" name:"metadata"`
	DigestTimedMetadata    *DigestTimedMetadata    `queryParam:"inline" name:"metadata"`
	DelayRegularMetadata   *DelayRegularMetadata   `queryParam:"inline" name:"metadata"`
	DelayScheduledMetadata *DelayScheduledMetadata `queryParam:"inline" name:"metadata"`

	Type MetadataType
}

func CreateMetadataDigestRegularMetadata(digestRegularMetadata DigestRegularMetadata) Metadata {
	typ := MetadataTypeDigestRegularMetadata

	return Metadata{
		DigestRegularMetadata: &digestRegularMetadata,
		Type:                  typ,
	}
}

func CreateMetadataDigestTimedMetadata(digestTimedMetadata DigestTimedMetadata) Metadata {
	typ := MetadataTypeDigestTimedMetadata

	return Metadata{
		DigestTimedMetadata: &digestTimedMetadata,
		Type:                typ,
	}
}

func CreateMetadataDelayRegularMetadata(delayRegularMetadata DelayRegularMetadata) Metadata {
	typ := MetadataTypeDelayRegularMetadata

	return Metadata{
		DelayRegularMetadata: &delayRegularMetadata,
		Type:                 typ,
	}
}

func CreateMetadataDelayScheduledMetadata(delayScheduledMetadata DelayScheduledMetadata) Metadata {
	typ := MetadataTypeDelayScheduledMetadata

	return Metadata{
		DelayScheduledMetadata: &delayScheduledMetadata,
		Type:                   typ,
	}
}

func (u *Metadata) UnmarshalJSON(data []byte) error {

	var delayScheduledMetadata DelayScheduledMetadata = DelayScheduledMetadata{}
	if err := utils.UnmarshalJSON(data, &delayScheduledMetadata, "", true, nil); err == nil {
		u.DelayScheduledMetadata = &delayScheduledMetadata
		u.Type = MetadataTypeDelayScheduledMetadata
		return nil
	}

	var digestRegularMetadata DigestRegularMetadata = DigestRegularMetadata{}
	if err := utils.UnmarshalJSON(data, &digestRegularMetadata, "", true, nil); err == nil {
		u.DigestRegularMetadata = &digestRegularMetadata
		u.Type = MetadataTypeDigestRegularMetadata
		return nil
	}

	var digestTimedMetadata DigestTimedMetadata = DigestTimedMetadata{}
	if err := utils.UnmarshalJSON(data, &digestTimedMetadata, "", true, nil); err == nil {
		u.DigestTimedMetadata = &digestTimedMetadata
		u.Type = MetadataTypeDigestTimedMetadata
		return nil
	}

	var delayRegularMetadata DelayRegularMetadata = DelayRegularMetadata{}
	if err := utils.UnmarshalJSON(data, &delayRegularMetadata, "", true, nil); err == nil {
		u.DelayRegularMetadata = &delayRegularMetadata
		u.Type = MetadataTypeDelayRegularMetadata
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Metadata", string(data))
}

func (u Metadata) MarshalJSON() ([]byte, error) {
	if u.DigestRegularMetadata != nil {
		return utils.MarshalJSON(u.DigestRegularMetadata, "", true)
	}

	if u.DigestTimedMetadata != nil {
		return utils.MarshalJSON(u.DigestTimedMetadata, "", true)
	}

	if u.DelayRegularMetadata != nil {
		return utils.MarshalJSON(u.DelayRegularMetadata, "", true)
	}

	if u.DelayScheduledMetadata != nil {
		return utils.MarshalJSON(u.DelayScheduledMetadata, "", true)
	}

	return nil, errors.New("could not marshal union type Metadata: all fields are null")
}

type NotificationStepDto struct {
	// Unique identifier for the notification step.
	ID *string `json:"_id,omitempty"`
	// Universally unique identifier for the notification step.
	UUID *string `json:"uuid,omitempty"`
	// Name of the notification step.
	Name *string `json:"name,omitempty"`
	// ID of the template associated with this notification step.
	TemplateID *string `json:"_templateId,omitempty"`
	// Indicates whether the notification step is active.
	Active *bool `json:"active,omitempty"`
	// Determines if the process should stop on failure.
	ShouldStopOnFail *bool `json:"shouldStopOnFail,omitempty"`
	// Message template used in this notification step.
	Template *MessageTemplate `json:"template,omitempty"`
	// Filters applied to this notification step.
	Filters []StepFilterDto `json:"filters,omitempty"`
	// ID of the parent notification step, if applicable.
	ParentID *string `json:"_parentId,omitempty"`
	// Metadata associated with the workflow step. Can vary based on the type of step.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Callback information for replies, including whether it is active and the callback URL.
	ReplyCallback *ReplyCallback         `json:"replyCallback,omitempty"`
	Variants      []NotificationStepData `json:"variants,omitempty"`
}

func (o *NotificationStepDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NotificationStepDto) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *NotificationStepDto) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *NotificationStepDto) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *NotificationStepDto) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *NotificationStepDto) GetShouldStopOnFail() *bool {
	if o == nil {
		return nil
	}
	return o.ShouldStopOnFail
}

func (o *NotificationStepDto) GetTemplate() *MessageTemplate {
	if o == nil {
		return nil
	}
	return o.Template
}

func (o *NotificationStepDto) GetFilters() []StepFilterDto {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *NotificationStepDto) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *NotificationStepDto) GetMetadata() *Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *NotificationStepDto) GetReplyCallback() *ReplyCallback {
	if o == nil {
		return nil
	}
	return o.ReplyCallback
}

func (o *NotificationStepDto) GetVariants() []NotificationStepData {
	if o == nil {
		return nil
	}
	return o.Variants
}
