// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// TriggerEventToAllRequestDtoOverrides - This could be used to override provider specific configurations
type TriggerEventToAllRequestDtoOverrides struct {
	// This could be used to override provider specific configurations
	Steps map[string]StepsOverrides `json:"steps,omitempty"`
	// Overrides the provider configuration for the entire workflow and all steps
	Providers map[string]map[string]any `json:"providers,omitempty"`
	// Override the email provider specific configurations for the entire workflow
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Email map[string]any `json:"email,omitempty"`
	// Override the push provider specific configurations for the entire workflow
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Push map[string]any `json:"push,omitempty"`
	// Override the sms provider specific configurations for the entire workflow
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Sms map[string]any `json:"sms,omitempty"`
	// Override the chat provider specific configurations for the entire workflow
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Chat map[string]any `json:"chat,omitempty"`
	// Override the layout identifier for the entire workflow
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LayoutIdentifier     *string                   `json:"layoutIdentifier,omitempty"`
	AdditionalProperties map[string]map[string]any `additionalProperties:"true" json:"-"`
}

func (t TriggerEventToAllRequestDtoOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TriggerEventToAllRequestDtoOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TriggerEventToAllRequestDtoOverrides) GetSteps() map[string]StepsOverrides {
	if o == nil {
		return nil
	}
	return o.Steps
}

func (o *TriggerEventToAllRequestDtoOverrides) GetProviders() map[string]map[string]any {
	if o == nil {
		return nil
	}
	return o.Providers
}

func (o *TriggerEventToAllRequestDtoOverrides) GetEmail() map[string]any {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *TriggerEventToAllRequestDtoOverrides) GetPush() map[string]any {
	if o == nil {
		return nil
	}
	return o.Push
}

func (o *TriggerEventToAllRequestDtoOverrides) GetSms() map[string]any {
	if o == nil {
		return nil
	}
	return o.Sms
}

func (o *TriggerEventToAllRequestDtoOverrides) GetChat() map[string]any {
	if o == nil {
		return nil
	}
	return o.Chat
}

func (o *TriggerEventToAllRequestDtoOverrides) GetLayoutIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.LayoutIdentifier
}

func (o *TriggerEventToAllRequestDtoOverrides) GetAdditionalProperties() map[string]map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type TriggerEventToAllRequestDtoActorType string

const (
	TriggerEventToAllRequestDtoActorTypeStr                  TriggerEventToAllRequestDtoActorType = "str"
	TriggerEventToAllRequestDtoActorTypeSubscriberPayloadDto TriggerEventToAllRequestDtoActorType = "SubscriberPayloadDto"
)

// TriggerEventToAllRequestDtoActor - It is used to display the Avatar of the provided actor's subscriber id or actor object.
//
//	If a new actor object is provided, we will create a new subscriber in our system
type TriggerEventToAllRequestDtoActor struct {
	Str                  *string               `queryParam:"inline"`
	SubscriberPayloadDto *SubscriberPayloadDto `queryParam:"inline"`

	Type TriggerEventToAllRequestDtoActorType
}

func CreateTriggerEventToAllRequestDtoActorStr(str string) TriggerEventToAllRequestDtoActor {
	typ := TriggerEventToAllRequestDtoActorTypeStr

	return TriggerEventToAllRequestDtoActor{
		Str:  &str,
		Type: typ,
	}
}

func CreateTriggerEventToAllRequestDtoActorSubscriberPayloadDto(subscriberPayloadDto SubscriberPayloadDto) TriggerEventToAllRequestDtoActor {
	typ := TriggerEventToAllRequestDtoActorTypeSubscriberPayloadDto

	return TriggerEventToAllRequestDtoActor{
		SubscriberPayloadDto: &subscriberPayloadDto,
		Type:                 typ,
	}
}

func (u *TriggerEventToAllRequestDtoActor) UnmarshalJSON(data []byte) error {

	var subscriberPayloadDto SubscriberPayloadDto = SubscriberPayloadDto{}
	if err := utils.UnmarshalJSON(data, &subscriberPayloadDto, "", true, true); err == nil {
		u.SubscriberPayloadDto = &subscriberPayloadDto
		u.Type = TriggerEventToAllRequestDtoActorTypeSubscriberPayloadDto
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TriggerEventToAllRequestDtoActorTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TriggerEventToAllRequestDtoActor", string(data))
}

func (u TriggerEventToAllRequestDtoActor) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.SubscriberPayloadDto != nil {
		return utils.MarshalJSON(u.SubscriberPayloadDto, "", true)
	}

	return nil, errors.New("could not marshal union type TriggerEventToAllRequestDtoActor: all fields are null")
}

type TriggerEventToAllRequestDtoTenantType string

const (
	TriggerEventToAllRequestDtoTenantTypeStr              TriggerEventToAllRequestDtoTenantType = "str"
	TriggerEventToAllRequestDtoTenantTypeTenantPayloadDto TriggerEventToAllRequestDtoTenantType = "TenantPayloadDto"
)

// TriggerEventToAllRequestDtoTenant - It is used to specify a tenant context during trigger event.
//
//	If a new tenant object is provided, we will create a new tenant.
type TriggerEventToAllRequestDtoTenant struct {
	Str              *string           `queryParam:"inline"`
	TenantPayloadDto *TenantPayloadDto `queryParam:"inline"`

	Type TriggerEventToAllRequestDtoTenantType
}

func CreateTriggerEventToAllRequestDtoTenantStr(str string) TriggerEventToAllRequestDtoTenant {
	typ := TriggerEventToAllRequestDtoTenantTypeStr

	return TriggerEventToAllRequestDtoTenant{
		Str:  &str,
		Type: typ,
	}
}

func CreateTriggerEventToAllRequestDtoTenantTenantPayloadDto(tenantPayloadDto TenantPayloadDto) TriggerEventToAllRequestDtoTenant {
	typ := TriggerEventToAllRequestDtoTenantTypeTenantPayloadDto

	return TriggerEventToAllRequestDtoTenant{
		TenantPayloadDto: &tenantPayloadDto,
		Type:             typ,
	}
}

func (u *TriggerEventToAllRequestDtoTenant) UnmarshalJSON(data []byte) error {

	var tenantPayloadDto TenantPayloadDto = TenantPayloadDto{}
	if err := utils.UnmarshalJSON(data, &tenantPayloadDto, "", true, true); err == nil {
		u.TenantPayloadDto = &tenantPayloadDto
		u.Type = TriggerEventToAllRequestDtoTenantTypeTenantPayloadDto
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TriggerEventToAllRequestDtoTenantTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TriggerEventToAllRequestDtoTenant", string(data))
}

func (u TriggerEventToAllRequestDtoTenant) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.TenantPayloadDto != nil {
		return utils.MarshalJSON(u.TenantPayloadDto, "", true)
	}

	return nil, errors.New("could not marshal union type TriggerEventToAllRequestDtoTenant: all fields are null")
}

type TriggerEventToAllRequestDto struct {
	// The trigger identifier associated for the template you wish to send. This identifier can be found on the template page.
	Name string `json:"name"`
	// The payload object is used to pass additional information that
	//     could be used to render the template, or perform routing rules based on it.
	//       For In-App channel, payload data are also available in <Inbox />
	Payload map[string]any `json:"payload"`
	// This could be used to override provider specific configurations
	Overrides *TriggerEventToAllRequestDtoOverrides `json:"overrides,omitempty"`
	// A unique identifier for this transaction, we will generated a UUID if not provided.
	TransactionID *string `json:"transactionId,omitempty"`
	// It is used to display the Avatar of the provided actor's subscriber id or actor object.
	//     If a new actor object is provided, we will create a new subscriber in our system
	//
	Actor *TriggerEventToAllRequestDtoActor `json:"actor,omitempty"`
	// It is used to specify a tenant context during trigger event.
	//     If a new tenant object is provided, we will create a new tenant.
	//
	Tenant *TriggerEventToAllRequestDtoTenant `json:"tenant,omitempty"`
}

func (o *TriggerEventToAllRequestDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TriggerEventToAllRequestDto) GetPayload() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Payload
}

func (o *TriggerEventToAllRequestDto) GetOverrides() *TriggerEventToAllRequestDtoOverrides {
	if o == nil {
		return nil
	}
	return o.Overrides
}

func (o *TriggerEventToAllRequestDto) GetTransactionID() *string {
	if o == nil {
		return nil
	}
	return o.TransactionID
}

func (o *TriggerEventToAllRequestDto) GetActor() *TriggerEventToAllRequestDtoActor {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *TriggerEventToAllRequestDto) GetTenant() *TriggerEventToAllRequestDtoTenant {
	if o == nil {
		return nil
	}
	return o.Tenant
}
