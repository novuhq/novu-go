// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/novuhq/novu-go/internal/utils"
)

// CustomStepResponseDtoControlValues - Control values for the custom step
type CustomStepResponseDtoControlValues struct {
	// Custom control values for the step.
	Custom               map[string]any `json:"custom,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (c CustomStepResponseDtoControlValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomStepResponseDtoControlValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomStepResponseDtoControlValues) GetCustom() map[string]any {
	if o == nil {
		return nil
	}
	return o.Custom
}

func (o *CustomStepResponseDtoControlValues) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// CustomStepResponseDtoSlug - Slug of the step
type CustomStepResponseDtoSlug struct {
}

type CustomStepResponseDto struct {
	// Controls metadata for the custom step
	Controls CustomControlsMetadataResponseDto `json:"controls"`
	// Control values for the custom step
	ControlValues *CustomStepResponseDtoControlValues `json:"controlValues,omitempty"`
	// JSON Schema for variables, follows the JSON Schema standard
	Variables map[string]any `json:"variables"`
	// Unique identifier of the step
	StepID string `json:"stepId"`
	// Database identifier of the step
	ID string `json:"_id"`
	// Name of the step
	Name string `json:"name"`
	// Slug of the step
	Slug CustomStepResponseDtoSlug `json:"slug"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Origin of the workflow
	Origin WorkflowOriginEnum `json:"origin"`
	// Workflow identifier
	WorkflowID string `json:"workflowId"`
	// Workflow database identifier
	WorkflowDatabaseID string `json:"workflowDatabaseId"`
	// Issues associated with the step
	Issues *StepIssuesDto `json:"issues,omitempty"`
}

func (o *CustomStepResponseDto) GetControls() CustomControlsMetadataResponseDto {
	if o == nil {
		return CustomControlsMetadataResponseDto{}
	}
	return o.Controls
}

func (o *CustomStepResponseDto) GetControlValues() *CustomStepResponseDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}

func (o *CustomStepResponseDto) GetVariables() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Variables
}

func (o *CustomStepResponseDto) GetStepID() string {
	if o == nil {
		return ""
	}
	return o.StepID
}

func (o *CustomStepResponseDto) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CustomStepResponseDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomStepResponseDto) GetSlug() CustomStepResponseDtoSlug {
	if o == nil {
		return CustomStepResponseDtoSlug{}
	}
	return o.Slug
}

func (o *CustomStepResponseDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *CustomStepResponseDto) GetOrigin() WorkflowOriginEnum {
	if o == nil {
		return WorkflowOriginEnum("")
	}
	return o.Origin
}

func (o *CustomStepResponseDto) GetWorkflowID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowID
}

func (o *CustomStepResponseDto) GetWorkflowDatabaseID() string {
	if o == nil {
		return ""
	}
	return o.WorkflowDatabaseID
}

func (o *CustomStepResponseDto) GetIssues() *StepIssuesDto {
	if o == nil {
		return nil
	}
	return o.Issues
}
