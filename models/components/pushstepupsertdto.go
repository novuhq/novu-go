// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type PushStepUpsertDtoControlValuesType string

const (
	PushStepUpsertDtoControlValuesTypePushControlDto PushStepUpsertDtoControlValuesType = "PushControlDto"
	PushStepUpsertDtoControlValuesTypeMapOfAny       PushStepUpsertDtoControlValuesType = "mapOfAny"
)

// PushStepUpsertDtoControlValues - Control values for the Push step.
type PushStepUpsertDtoControlValues struct {
	PushControlDto *PushControlDto `queryParam:"inline"`
	MapOfAny       map[string]any  `queryParam:"inline"`

	Type PushStepUpsertDtoControlValuesType
}

func CreatePushStepUpsertDtoControlValuesPushControlDto(pushControlDto PushControlDto) PushStepUpsertDtoControlValues {
	typ := PushStepUpsertDtoControlValuesTypePushControlDto

	return PushStepUpsertDtoControlValues{
		PushControlDto: &pushControlDto,
		Type:           typ,
	}
}

func CreatePushStepUpsertDtoControlValuesMapOfAny(mapOfAny map[string]any) PushStepUpsertDtoControlValues {
	typ := PushStepUpsertDtoControlValuesTypeMapOfAny

	return PushStepUpsertDtoControlValues{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *PushStepUpsertDtoControlValues) UnmarshalJSON(data []byte) error {

	var pushControlDto PushControlDto = PushControlDto{}
	if err := utils.UnmarshalJSON(data, &pushControlDto, "", true, true); err == nil {
		u.PushControlDto = &pushControlDto
		u.Type = PushStepUpsertDtoControlValuesTypePushControlDto
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = PushStepUpsertDtoControlValuesTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PushStepUpsertDtoControlValues", string(data))
}

func (u PushStepUpsertDtoControlValues) MarshalJSON() ([]byte, error) {
	if u.PushControlDto != nil {
		return utils.MarshalJSON(u.PushControlDto, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type PushStepUpsertDtoControlValues: all fields are null")
}

type PushStepUpsertDto struct {
	// Unique identifier of the step
	ID *string `json:"_id,omitempty"`
	// Name of the step
	Name string `json:"name"`
	// Type of the step
	Type StepTypeEnum `json:"type"`
	// Control values for the Push step.
	ControlValues *PushStepUpsertDtoControlValues `json:"controlValues,omitempty"`
}

func (o *PushStepUpsertDto) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PushStepUpsertDto) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PushStepUpsertDto) GetType() StepTypeEnum {
	if o == nil {
		return StepTypeEnum("")
	}
	return o.Type
}

func (o *PushStepUpsertDto) GetControlValues() *PushStepUpsertDtoControlValues {
	if o == nil {
		return nil
	}
	return o.ControlValues
}
