// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

// ThrottleControlDtoType - The type of throttle window.
type ThrottleControlDtoType string

const (
	ThrottleControlDtoTypeFixed   ThrottleControlDtoType = "fixed"
	ThrottleControlDtoTypeDynamic ThrottleControlDtoType = "dynamic"
)

func (e ThrottleControlDtoType) ToPointer() *ThrottleControlDtoType {
	return &e
}
func (e *ThrottleControlDtoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "dynamic":
		*e = ThrottleControlDtoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThrottleControlDtoType: %v", v)
	}
}

// ThrottleControlDtoUnit - The unit of time for the throttle window (required for fixed type).
type ThrottleControlDtoUnit string

const (
	ThrottleControlDtoUnitMinutes ThrottleControlDtoUnit = "minutes"
	ThrottleControlDtoUnitHours   ThrottleControlDtoUnit = "hours"
	ThrottleControlDtoUnitDays    ThrottleControlDtoUnit = "days"
)

func (e ThrottleControlDtoUnit) ToPointer() *ThrottleControlDtoUnit {
	return &e
}
func (e *ThrottleControlDtoUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		*e = ThrottleControlDtoUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ThrottleControlDtoUnit: %v", v)
	}
}

type ThrottleControlDto struct {
	// JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
	Skip map[string]any `json:"skip,omitempty"`
	// The type of throttle window.
	Type *ThrottleControlDtoType `default:"fixed" json:"type"`
	// The amount of time for the throttle window (required for fixed type).
	Amount *float64 `json:"amount,omitempty"`
	// The unit of time for the throttle window (required for fixed type).
	Unit *ThrottleControlDtoUnit `json:"unit,omitempty"`
	// Key path to retrieve dynamic window value (required for dynamic type).
	DynamicKey *string `json:"dynamicKey,omitempty"`
	// The maximum number of executions allowed within the window. Defaults to 1.
	Threshold *float64 `default:"1" json:"threshold"`
	// Optional key for grouping throttle rules. If not provided, defaults to workflow and subscriber combination.
	ThrottleKey *string `json:"throttleKey,omitempty"`
}

func (t ThrottleControlDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *ThrottleControlDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *ThrottleControlDto) GetSkip() map[string]any {
	if t == nil {
		return nil
	}
	return t.Skip
}

func (t *ThrottleControlDto) GetType() *ThrottleControlDtoType {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *ThrottleControlDto) GetAmount() *float64 {
	if t == nil {
		return nil
	}
	return t.Amount
}

func (t *ThrottleControlDto) GetUnit() *ThrottleControlDtoUnit {
	if t == nil {
		return nil
	}
	return t.Unit
}

func (t *ThrottleControlDto) GetDynamicKey() *string {
	if t == nil {
		return nil
	}
	return t.DynamicKey
}

func (t *ThrottleControlDto) GetThreshold() *float64 {
	if t == nil {
		return nil
	}
	return t.Threshold
}

func (t *ThrottleControlDto) GetThrottleKey() *string {
	if t == nil {
		return nil
	}
	return t.ThrottleKey
}
