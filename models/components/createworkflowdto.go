// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type StepsType string

const (
	StepsTypeInApp    StepsType = "in_app"
	StepsTypeEmail    StepsType = "email"
	StepsTypeSms      StepsType = "sms"
	StepsTypePush     StepsType = "push"
	StepsTypeChat     StepsType = "chat"
	StepsTypeDelay    StepsType = "delay"
	StepsTypeDigest   StepsType = "digest"
	StepsTypeThrottle StepsType = "throttle"
	StepsTypeCustom   StepsType = "custom"
)

type Steps struct {
	InAppStepUpsertDto    *InAppStepUpsertDto    `queryParam:"inline,name=steps"`
	EmailStepUpsertDto    *EmailStepUpsertDto    `queryParam:"inline,name=steps"`
	SmsStepUpsertDto      *SmsStepUpsertDto      `queryParam:"inline,name=steps"`
	PushStepUpsertDto     *PushStepUpsertDto     `queryParam:"inline,name=steps"`
	ChatStepUpsertDto     *ChatStepUpsertDto     `queryParam:"inline,name=steps"`
	DelayStepUpsertDto    *DelayStepUpsertDto    `queryParam:"inline,name=steps"`
	DigestStepUpsertDto   *DigestStepUpsertDto   `queryParam:"inline,name=steps"`
	ThrottleStepUpsertDto *ThrottleStepUpsertDto `queryParam:"inline,name=steps"`
	CustomStepUpsertDto   *CustomStepUpsertDto   `queryParam:"inline,name=steps"`

	Type StepsType
}

func CreateStepsInApp(inApp InAppStepUpsertDto) Steps {
	typ := StepsTypeInApp

	typStr := StepTypeEnum(typ)
	inApp.Type = typStr

	return Steps{
		InAppStepUpsertDto: &inApp,
		Type:               typ,
	}
}

func CreateStepsEmail(email EmailStepUpsertDto) Steps {
	typ := StepsTypeEmail

	typStr := StepTypeEnum(typ)
	email.Type = typStr

	return Steps{
		EmailStepUpsertDto: &email,
		Type:               typ,
	}
}

func CreateStepsSms(sms SmsStepUpsertDto) Steps {
	typ := StepsTypeSms

	typStr := StepTypeEnum(typ)
	sms.Type = typStr

	return Steps{
		SmsStepUpsertDto: &sms,
		Type:             typ,
	}
}

func CreateStepsPush(push PushStepUpsertDto) Steps {
	typ := StepsTypePush

	typStr := StepTypeEnum(typ)
	push.Type = typStr

	return Steps{
		PushStepUpsertDto: &push,
		Type:              typ,
	}
}

func CreateStepsChat(chat ChatStepUpsertDto) Steps {
	typ := StepsTypeChat

	typStr := StepTypeEnum(typ)
	chat.Type = typStr

	return Steps{
		ChatStepUpsertDto: &chat,
		Type:              typ,
	}
}

func CreateStepsDelay(delay DelayStepUpsertDto) Steps {
	typ := StepsTypeDelay

	typStr := StepTypeEnum(typ)
	delay.Type = typStr

	return Steps{
		DelayStepUpsertDto: &delay,
		Type:               typ,
	}
}

func CreateStepsDigest(digest DigestStepUpsertDto) Steps {
	typ := StepsTypeDigest

	typStr := StepTypeEnum(typ)
	digest.Type = typStr

	return Steps{
		DigestStepUpsertDto: &digest,
		Type:                typ,
	}
}

func CreateStepsThrottle(throttle ThrottleStepUpsertDto) Steps {
	typ := StepsTypeThrottle

	typStr := StepTypeEnum(typ)
	throttle.Type = typStr

	return Steps{
		ThrottleStepUpsertDto: &throttle,
		Type:                  typ,
	}
}

func CreateStepsCustom(custom CustomStepUpsertDto) Steps {
	typ := StepsTypeCustom

	typStr := StepTypeEnum(typ)
	custom.Type = typStr

	return Steps{
		CustomStepUpsertDto: &custom,
		Type:                typ,
	}
}

func (u *Steps) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "in_app":
		inAppStepUpsertDto := new(InAppStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &inAppStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == in_app) type InAppStepUpsertDto within Steps: %w", string(data), err)
		}

		u.InAppStepUpsertDto = inAppStepUpsertDto
		u.Type = StepsTypeInApp
		return nil
	case "email":
		emailStepUpsertDto := new(EmailStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &emailStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == email) type EmailStepUpsertDto within Steps: %w", string(data), err)
		}

		u.EmailStepUpsertDto = emailStepUpsertDto
		u.Type = StepsTypeEmail
		return nil
	case "sms":
		smsStepUpsertDto := new(SmsStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &smsStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sms) type SmsStepUpsertDto within Steps: %w", string(data), err)
		}

		u.SmsStepUpsertDto = smsStepUpsertDto
		u.Type = StepsTypeSms
		return nil
	case "push":
		pushStepUpsertDto := new(PushStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &pushStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == push) type PushStepUpsertDto within Steps: %w", string(data), err)
		}

		u.PushStepUpsertDto = pushStepUpsertDto
		u.Type = StepsTypePush
		return nil
	case "chat":
		chatStepUpsertDto := new(ChatStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &chatStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == chat) type ChatStepUpsertDto within Steps: %w", string(data), err)
		}

		u.ChatStepUpsertDto = chatStepUpsertDto
		u.Type = StepsTypeChat
		return nil
	case "delay":
		delayStepUpsertDto := new(DelayStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &delayStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == delay) type DelayStepUpsertDto within Steps: %w", string(data), err)
		}

		u.DelayStepUpsertDto = delayStepUpsertDto
		u.Type = StepsTypeDelay
		return nil
	case "digest":
		digestStepUpsertDto := new(DigestStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &digestStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == digest) type DigestStepUpsertDto within Steps: %w", string(data), err)
		}

		u.DigestStepUpsertDto = digestStepUpsertDto
		u.Type = StepsTypeDigest
		return nil
	case "throttle":
		throttleStepUpsertDto := new(ThrottleStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &throttleStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == throttle) type ThrottleStepUpsertDto within Steps: %w", string(data), err)
		}

		u.ThrottleStepUpsertDto = throttleStepUpsertDto
		u.Type = StepsTypeThrottle
		return nil
	case "custom":
		customStepUpsertDto := new(CustomStepUpsertDto)
		if err := utils.UnmarshalJSON(data, &customStepUpsertDto, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == custom) type CustomStepUpsertDto within Steps: %w", string(data), err)
		}

		u.CustomStepUpsertDto = customStepUpsertDto
		u.Type = StepsTypeCustom
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Steps", string(data))
}

func (u Steps) MarshalJSON() ([]byte, error) {
	if u.InAppStepUpsertDto != nil {
		return utils.MarshalJSON(u.InAppStepUpsertDto, "", true)
	}

	if u.EmailStepUpsertDto != nil {
		return utils.MarshalJSON(u.EmailStepUpsertDto, "", true)
	}

	if u.SmsStepUpsertDto != nil {
		return utils.MarshalJSON(u.SmsStepUpsertDto, "", true)
	}

	if u.PushStepUpsertDto != nil {
		return utils.MarshalJSON(u.PushStepUpsertDto, "", true)
	}

	if u.ChatStepUpsertDto != nil {
		return utils.MarshalJSON(u.ChatStepUpsertDto, "", true)
	}

	if u.DelayStepUpsertDto != nil {
		return utils.MarshalJSON(u.DelayStepUpsertDto, "", true)
	}

	if u.DigestStepUpsertDto != nil {
		return utils.MarshalJSON(u.DigestStepUpsertDto, "", true)
	}

	if u.ThrottleStepUpsertDto != nil {
		return utils.MarshalJSON(u.ThrottleStepUpsertDto, "", true)
	}

	if u.CustomStepUpsertDto != nil {
		return utils.MarshalJSON(u.CustomStepUpsertDto, "", true)
	}

	return nil, errors.New("could not marshal union type Steps: all fields are null")
}

type CreateWorkflowDto struct {
	// Name of the workflow
	Name string `json:"name"`
	// Description of the workflow
	Description *string `json:"description,omitempty"`
	// Tags associated with the workflow
	Tags []string `json:"tags,omitempty"`
	// Whether the workflow is active
	Active *bool `default:"false" json:"active"`
	// Enable or disable payload schema validation
	ValidatePayload *bool `json:"validatePayload,omitempty"`
	// The payload JSON Schema for the workflow
	PayloadSchema map[string]any `json:"payloadSchema,omitempty"`
	// Enable or disable translations for this workflow
	IsTranslationEnabled *bool `default:"false" json:"isTranslationEnabled"`
	// Unique identifier for the workflow
	WorkflowID string `json:"workflowId"`
	// Steps of the workflow
	Steps []Steps `json:"steps"`
	// Source of workflow creation
	Source *WorkflowCreationSourceEnum `default:"editor" json:"__source"`
	// Workflow preferences
	Preferences *PreferencesRequestDto `json:"preferences,omitempty"`
	// Severity of the workflow
	Severity *SeverityLevelEnum `json:"severity,omitempty"`
}

func (c CreateWorkflowDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateWorkflowDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "workflowId", "steps"}); err != nil {
		return err
	}
	return nil
}

func (c *CreateWorkflowDto) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateWorkflowDto) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateWorkflowDto) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CreateWorkflowDto) GetActive() *bool {
	if c == nil {
		return nil
	}
	return c.Active
}

func (c *CreateWorkflowDto) GetValidatePayload() *bool {
	if c == nil {
		return nil
	}
	return c.ValidatePayload
}

func (c *CreateWorkflowDto) GetPayloadSchema() map[string]any {
	if c == nil {
		return nil
	}
	return c.PayloadSchema
}

func (c *CreateWorkflowDto) GetIsTranslationEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.IsTranslationEnabled
}

func (c *CreateWorkflowDto) GetWorkflowID() string {
	if c == nil {
		return ""
	}
	return c.WorkflowID
}

func (c *CreateWorkflowDto) GetSteps() []Steps {
	if c == nil {
		return []Steps{}
	}
	return c.Steps
}

func (c *CreateWorkflowDto) GetSource() *WorkflowCreationSourceEnum {
	if c == nil {
		return nil
	}
	return c.Source
}

func (c *CreateWorkflowDto) GetPreferences() *PreferencesRequestDto {
	if c == nil {
		return nil
	}
	return c.Preferences
}

func (c *CreateWorkflowDto) GetSeverity() *SeverityLevelEnum {
	if c == nil {
		return nil
	}
	return c.Severity
}
