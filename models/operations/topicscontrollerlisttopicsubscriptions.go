// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/models/components"
)

// TopicsControllerListTopicSubscriptionsQueryParamOrderDirection - Direction of sorting
type TopicsControllerListTopicSubscriptionsQueryParamOrderDirection string

const (
	TopicsControllerListTopicSubscriptionsQueryParamOrderDirectionAsc  TopicsControllerListTopicSubscriptionsQueryParamOrderDirection = "ASC"
	TopicsControllerListTopicSubscriptionsQueryParamOrderDirectionDesc TopicsControllerListTopicSubscriptionsQueryParamOrderDirection = "DESC"
)

func (e TopicsControllerListTopicSubscriptionsQueryParamOrderDirection) ToPointer() *TopicsControllerListTopicSubscriptionsQueryParamOrderDirection {
	return &e
}
func (e *TopicsControllerListTopicSubscriptionsQueryParamOrderDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = TopicsControllerListTopicSubscriptionsQueryParamOrderDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopicsControllerListTopicSubscriptionsQueryParamOrderDirection: %v", v)
	}
}

type TopicsControllerListTopicSubscriptionsRequest struct {
	// The key identifier of the topic
	TopicKey string `pathParam:"style=simple,explode=false,name=topicKey"`
	// Cursor for pagination indicating the starting point after which to fetch results.
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Cursor for pagination indicating the ending point before which to fetch results.
	Before *string `queryParam:"style=form,explode=true,name=before"`
	// Limit the number of items to return (max 100)
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Direction of sorting
	OrderDirection *TopicsControllerListTopicSubscriptionsQueryParamOrderDirection `queryParam:"style=form,explode=true,name=orderDirection"`
	// Field to order by
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Include cursor item in response
	IncludeCursor *bool `queryParam:"style=form,explode=true,name=includeCursor"`
	// Filter by subscriber ID
	SubscriberID *string `queryParam:"style=form,explode=true,name=subscriberId"`
	// A header for idempotency purposes
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetTopicKey() string {
	if o == nil {
		return ""
	}
	return o.TopicKey
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetAfter() *string {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetBefore() *string {
	if o == nil {
		return nil
	}
	return o.Before
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetOrderDirection() *TopicsControllerListTopicSubscriptionsQueryParamOrderDirection {
	if o == nil {
		return nil
	}
	return o.OrderDirection
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetOrderBy() *string {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetIncludeCursor() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeCursor
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetSubscriberID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriberID
}

func (o *TopicsControllerListTopicSubscriptionsRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

type TopicsControllerListTopicSubscriptionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ListTopicSubscriptionsResponseDto *components.ListTopicSubscriptionsResponseDto
	Headers                           map[string][]string
}

func (o *TopicsControllerListTopicSubscriptionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *TopicsControllerListTopicSubscriptionsResponse) GetListTopicSubscriptionsResponseDto() *components.ListTopicSubscriptionsResponseDto {
	if o == nil {
		return nil
	}
	return o.ListTopicSubscriptionsResponseDto
}

func (o *TopicsControllerListTopicSubscriptionsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
