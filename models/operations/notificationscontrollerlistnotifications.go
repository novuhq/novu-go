// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/novuhq/novu-go/internal/utils"
	"github.com/novuhq/novu-go/models/components"
)

type NotificationsControllerListNotificationsRequest struct {
	// Array of channel types
	Channels []components.ChannelTypeEnum `queryParam:"style=form,explode=true,name=channels"`
	// Array of template IDs or a single template ID
	Templates []string `queryParam:"style=form,explode=true,name=templates"`
	// Array of email addresses or a single email address
	Emails []string `queryParam:"style=form,explode=true,name=emails"`
	// Search term (deprecated)
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Array of subscriber IDs or a single subscriber ID
	SubscriberIds []string `queryParam:"style=form,explode=true,name=subscriberIds"`
	// Array of severity levels or a single severity level
	Severity []string `queryParam:"style=form,explode=true,name=severity"`
	// Page number for pagination
	Page *float64 `default:"0" queryParam:"style=form,explode=true,name=page"`
	// Limit for pagination
	Limit *float64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// The transaction ID to filter by
	TransactionID *string `queryParam:"style=form,explode=true,name=transactionId"`
	// Topic Key for filtering notifications by topic
	TopicKey *string `queryParam:"style=form,explode=true,name=topicKey"`
	// Filter by exact context keys (format: "type:id")
	ContextKeys []string `queryParam:"style=form,explode=true,name=contextKeys"`
	// Date filter for records after this timestamp. Defaults to earliest date allowed by subscription plan
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Date filter for records before this timestamp. Defaults to current time of request (now)
	Before *string `queryParam:"style=form,explode=true,name=before"`
	// A header for idempotency purposes
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (n NotificationsControllerListNotificationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NotificationsControllerListNotificationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (n *NotificationsControllerListNotificationsRequest) GetChannels() []components.ChannelTypeEnum {
	if n == nil {
		return nil
	}
	return n.Channels
}

func (n *NotificationsControllerListNotificationsRequest) GetTemplates() []string {
	if n == nil {
		return nil
	}
	return n.Templates
}

func (n *NotificationsControllerListNotificationsRequest) GetEmails() []string {
	if n == nil {
		return nil
	}
	return n.Emails
}

func (n *NotificationsControllerListNotificationsRequest) GetSearch() *string {
	if n == nil {
		return nil
	}
	return n.Search
}

func (n *NotificationsControllerListNotificationsRequest) GetSubscriberIds() []string {
	if n == nil {
		return nil
	}
	return n.SubscriberIds
}

func (n *NotificationsControllerListNotificationsRequest) GetSeverity() []string {
	if n == nil {
		return nil
	}
	return n.Severity
}

func (n *NotificationsControllerListNotificationsRequest) GetPage() *float64 {
	if n == nil {
		return nil
	}
	return n.Page
}

func (n *NotificationsControllerListNotificationsRequest) GetLimit() *float64 {
	if n == nil {
		return nil
	}
	return n.Limit
}

func (n *NotificationsControllerListNotificationsRequest) GetTransactionID() *string {
	if n == nil {
		return nil
	}
	return n.TransactionID
}

func (n *NotificationsControllerListNotificationsRequest) GetTopicKey() *string {
	if n == nil {
		return nil
	}
	return n.TopicKey
}

func (n *NotificationsControllerListNotificationsRequest) GetContextKeys() []string {
	if n == nil {
		return nil
	}
	return n.ContextKeys
}

func (n *NotificationsControllerListNotificationsRequest) GetAfter() *string {
	if n == nil {
		return nil
	}
	return n.After
}

func (n *NotificationsControllerListNotificationsRequest) GetBefore() *string {
	if n == nil {
		return nil
	}
	return n.Before
}

func (n *NotificationsControllerListNotificationsRequest) GetIdempotencyKey() *string {
	if n == nil {
		return nil
	}
	return n.IdempotencyKey
}

type NotificationsControllerListNotificationsResponse struct {
	HTTPMeta              components.HTTPMetadata `json:"-"`
	ActivitiesResponseDto *components.ActivitiesResponseDto
	Headers               map[string][]string
}

func (n *NotificationsControllerListNotificationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if n == nil {
		return components.HTTPMetadata{}
	}
	return n.HTTPMeta
}

func (n *NotificationsControllerListNotificationsResponse) GetActivitiesResponseDto() *components.ActivitiesResponseDto {
	if n == nil {
		return nil
	}
	return n.ActivitiesResponseDto
}

func (n *NotificationsControllerListNotificationsResponse) GetHeaders() map[string][]string {
	if n == nil {
		return map[string][]string{}
	}
	return n.Headers
}
