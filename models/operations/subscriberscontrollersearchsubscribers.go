// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/models/components"
)

// QueryParamOrderDirection - Direction of sorting
type QueryParamOrderDirection string

const (
	QueryParamOrderDirectionAsc  QueryParamOrderDirection = "ASC"
	QueryParamOrderDirectionDesc QueryParamOrderDirection = "DESC"
)

func (e QueryParamOrderDirection) ToPointer() *QueryParamOrderDirection {
	return &e
}
func (e *QueryParamOrderDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = QueryParamOrderDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamOrderDirection: %v", v)
	}
}

type SubscribersControllerSearchSubscribersRequest struct {
	// Cursor for pagination indicating the starting point after which to fetch results.
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Cursor for pagination indicating the ending point before which to fetch results.
	Before *string `queryParam:"style=form,explode=true,name=before"`
	// Limit the number of items to return
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Direction of sorting
	OrderDirection *QueryParamOrderDirection `queryParam:"style=form,explode=true,name=orderDirection"`
	// Field to order by
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Include cursor item in response
	IncludeCursor *bool `queryParam:"style=form,explode=true,name=includeCursor"`
	// Email address of the subscriber to filter results.
	Email *string `queryParam:"style=form,explode=true,name=email"`
	// Name of the subscriber to filter results.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Phone number of the subscriber to filter results.
	Phone *string `queryParam:"style=form,explode=true,name=phone"`
	// Unique identifier of the subscriber to filter results.
	SubscriberID *string `queryParam:"style=form,explode=true,name=subscriberId"`
	// A header for idempotency purposes
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (s *SubscribersControllerSearchSubscribersRequest) GetAfter() *string {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *SubscribersControllerSearchSubscribersRequest) GetBefore() *string {
	if s == nil {
		return nil
	}
	return s.Before
}

func (s *SubscribersControllerSearchSubscribersRequest) GetLimit() *float64 {
	if s == nil {
		return nil
	}
	return s.Limit
}

func (s *SubscribersControllerSearchSubscribersRequest) GetOrderDirection() *QueryParamOrderDirection {
	if s == nil {
		return nil
	}
	return s.OrderDirection
}

func (s *SubscribersControllerSearchSubscribersRequest) GetOrderBy() *string {
	if s == nil {
		return nil
	}
	return s.OrderBy
}

func (s *SubscribersControllerSearchSubscribersRequest) GetIncludeCursor() *bool {
	if s == nil {
		return nil
	}
	return s.IncludeCursor
}

func (s *SubscribersControllerSearchSubscribersRequest) GetEmail() *string {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SubscribersControllerSearchSubscribersRequest) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SubscribersControllerSearchSubscribersRequest) GetPhone() *string {
	if s == nil {
		return nil
	}
	return s.Phone
}

func (s *SubscribersControllerSearchSubscribersRequest) GetSubscriberID() *string {
	if s == nil {
		return nil
	}
	return s.SubscriberID
}

func (s *SubscribersControllerSearchSubscribersRequest) GetIdempotencyKey() *string {
	if s == nil {
		return nil
	}
	return s.IdempotencyKey
}

type SubscribersControllerSearchSubscribersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ListSubscribersResponseDto *components.ListSubscribersResponseDto
	Headers                    map[string][]string
}

func (s *SubscribersControllerSearchSubscribersResponse) GetHTTPMeta() components.HTTPMetadata {
	if s == nil {
		return components.HTTPMetadata{}
	}
	return s.HTTPMeta
}

func (s *SubscribersControllerSearchSubscribersResponse) GetListSubscribersResponseDto() *components.ListSubscribersResponseDto {
	if s == nil {
		return nil
	}
	return s.ListSubscribersResponseDto
}

func (s *SubscribersControllerSearchSubscribersResponse) GetHeaders() map[string][]string {
	if s == nil {
		return map[string][]string{}
	}
	return s.Headers
}
