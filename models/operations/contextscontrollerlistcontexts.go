// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/models/components"
)

// OrderDirection - Direction of sorting
type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

func (e OrderDirection) ToPointer() *OrderDirection {
	return &e
}
func (e *OrderDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = OrderDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderDirection: %v", v)
	}
}

type ContextsControllerListContextsRequest struct {
	// Cursor for pagination indicating the starting point after which to fetch results.
	After *string `queryParam:"style=form,explode=true,name=after"`
	// Cursor for pagination indicating the ending point before which to fetch results.
	Before *string `queryParam:"style=form,explode=true,name=before"`
	// Limit the number of items to return
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Direction of sorting
	OrderDirection *OrderDirection `queryParam:"style=form,explode=true,name=orderDirection"`
	// Field to order by
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// Include cursor item in response
	IncludeCursor *bool `queryParam:"style=form,explode=true,name=includeCursor"`
	// Filter contexts by id
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Search contexts by type or id (supports partial matching across both fields)
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// A header for idempotency purposes
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (c *ContextsControllerListContextsRequest) GetAfter() *string {
	if c == nil {
		return nil
	}
	return c.After
}

func (c *ContextsControllerListContextsRequest) GetBefore() *string {
	if c == nil {
		return nil
	}
	return c.Before
}

func (c *ContextsControllerListContextsRequest) GetLimit() *float64 {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *ContextsControllerListContextsRequest) GetOrderDirection() *OrderDirection {
	if c == nil {
		return nil
	}
	return c.OrderDirection
}

func (c *ContextsControllerListContextsRequest) GetOrderBy() *string {
	if c == nil {
		return nil
	}
	return c.OrderBy
}

func (c *ContextsControllerListContextsRequest) GetIncludeCursor() *bool {
	if c == nil {
		return nil
	}
	return c.IncludeCursor
}

func (c *ContextsControllerListContextsRequest) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ContextsControllerListContextsRequest) GetSearch() *string {
	if c == nil {
		return nil
	}
	return c.Search
}

func (c *ContextsControllerListContextsRequest) GetIdempotencyKey() *string {
	if c == nil {
		return nil
	}
	return c.IdempotencyKey
}

type ContextsControllerListContextsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ListContextsResponseDto *components.ListContextsResponseDto
	Headers                 map[string][]string
}

func (c *ContextsControllerListContextsResponse) GetHTTPMeta() components.HTTPMetadata {
	if c == nil {
		return components.HTTPMetadata{}
	}
	return c.HTTPMeta
}

func (c *ContextsControllerListContextsResponse) GetListContextsResponseDto() *components.ListContextsResponseDto {
	if c == nil {
		return nil
	}
	return c.ListContextsResponseDto
}

func (c *ContextsControllerListContextsResponse) GetHeaders() map[string][]string {
	if c == nil {
		return map[string][]string{}
	}
	return c.Headers
}
