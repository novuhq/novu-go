// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/novuhq/novu-go/models/components"
)

// PathParamResourceType - Resource type
type PathParamResourceType string

const (
	PathParamResourceTypeWorkflow PathParamResourceType = "workflow"
	PathParamResourceTypeLayout   PathParamResourceType = "layout"
)

func (e PathParamResourceType) ToPointer() *PathParamResourceType {
	return &e
}
func (e *PathParamResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "workflow":
		fallthrough
	case "layout":
		*e = PathParamResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PathParamResourceType: %v", v)
	}
}

type TranslationControllerGetSingleTranslationRequest struct {
	// Resource type
	ResourceType PathParamResourceType `pathParam:"style=simple,explode=false,name=resourceType"`
	// Resource ID
	ResourceID string `pathParam:"style=simple,explode=false,name=resourceId"`
	// Locale code
	Locale string `pathParam:"style=simple,explode=false,name=locale"`
	// A header for idempotency purposes
	IdempotencyKey *string `header:"style=simple,explode=false,name=idempotency-key"`
}

func (t *TranslationControllerGetSingleTranslationRequest) GetResourceType() PathParamResourceType {
	if t == nil {
		return PathParamResourceType("")
	}
	return t.ResourceType
}

func (t *TranslationControllerGetSingleTranslationRequest) GetResourceID() string {
	if t == nil {
		return ""
	}
	return t.ResourceID
}

func (t *TranslationControllerGetSingleTranslationRequest) GetLocale() string {
	if t == nil {
		return ""
	}
	return t.Locale
}

func (t *TranslationControllerGetSingleTranslationRequest) GetIdempotencyKey() *string {
	if t == nil {
		return nil
	}
	return t.IdempotencyKey
}

type TranslationControllerGetSingleTranslationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Translation found
	TranslationResponseDto *components.TranslationResponseDto
}

func (t *TranslationControllerGetSingleTranslationResponse) GetHTTPMeta() components.HTTPMetadata {
	if t == nil {
		return components.HTTPMetadata{}
	}
	return t.HTTPMeta
}

func (t *TranslationControllerGetSingleTranslationResponse) GetTranslationResponseDto() *components.TranslationResponseDto {
	if t == nil {
		return nil
	}
	return t.TranslationResponseDto
}
