// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
)

type ValueType string

const (
	ValueTypeStr             ValueType = "str"
	ValueTypeNumber          ValueType = "number"
	ValueTypeBoolean         ValueType = "boolean"
	ValueTypeMapOfAny        ValueType = "mapOfAny"
	ValueTypeArrayOfMapOfAny ValueType = "arrayOfMapOfAny"
)

type Value struct {
	Str             *string          `queryParam:"inline"`
	Number          *float64         `queryParam:"inline"`
	Boolean         *bool            `queryParam:"inline"`
	MapOfAny        map[string]any   `queryParam:"inline"`
	ArrayOfMapOfAny []map[string]any `queryParam:"inline"`

	Type ValueType
}

var _ error = &Value{}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueNumber(number float64) Value {
	typ := ValueTypeNumber

	return Value{
		Number: &number,
		Type:   typ,
	}
}

func CreateValueBoolean(boolean bool) Value {
	typ := ValueTypeBoolean

	return Value{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValueMapOfAny(mapOfAny map[string]any) Value {
	typ := ValueTypeMapOfAny

	return Value{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateValueArrayOfMapOfAny(arrayOfMapOfAny []map[string]any) Value {
	typ := ValueTypeArrayOfMapOfAny

	return Value{
		ArrayOfMapOfAny: arrayOfMapOfAny,
		Type:            typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ValueTypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ValueTypeMapOfAny
		return nil
	}

	var arrayOfMapOfAny []map[string]any = []map[string]any{}
	if err := utils.UnmarshalJSON(data, &arrayOfMapOfAny, "", true, true); err == nil {
		u.ArrayOfMapOfAny = arrayOfMapOfAny
		u.Type = ValueTypeArrayOfMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value", string(data))
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfMapOfAny != nil {
		return utils.MarshalJSON(u.ArrayOfMapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Value: all fields are null")
}

func (u Value) Error() string {
	switch u.Type {
	case ValueTypeStr:
		data, _ := json.Marshal(u.Str)
		return string(data)
	case ValueTypeNumber:
		data, _ := json.Marshal(u.Number)
		return string(data)
	case ValueTypeBoolean:
		data, _ := json.Marshal(u.Boolean)
		return string(data)
	case ValueTypeMapOfAny:
		data, _ := json.Marshal(u.MapOfAny)
		return string(data)
	case ValueTypeArrayOfMapOfAny:
		data, _ := json.Marshal(u.ArrayOfMapOfAny)
		return string(data)
	default:
		return "unknown error"
	}
}

type Errors struct {
	Messages []string `json:"messages"`
	Value    *Value   `json:"value"`
}

func (o *Errors) GetMessages() []string {
	if o == nil {
		return []string{}
	}
	return o.Messages
}

func (o *Errors) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}

type ValidationErrorDto struct {
	// HTTP status code of the error response.
	StatusCode float64 `json:"statusCode"`
	// Timestamp of when the error occurred.
	Timestamp string `json:"timestamp"`
	// The path where the error occurred.
	Path string `json:"path"`
	// A detailed error message.
	Message string `json:"message"`
	// Optional context object for additional error details.
	Ctx map[string]any `json:"ctx,omitempty"`
	// Optional unique identifier for the error, useful for tracking using Sentry and
	//       New Relic, only available for 500.
	ErrorID *string `json:"errorId,omitempty"`
	// A record of validation errors keyed by field name
	Errors map[string]Errors `json:"errors"`
}

var _ error = &ValidationErrorDto{}

func (e *ValidationErrorDto) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
