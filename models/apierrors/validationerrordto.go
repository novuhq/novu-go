// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
	"github.com/novuhq/novu-go/models/components"
)

type Message5Type string

const (
	Message5TypeStr      Message5Type = "str"
	Message5TypeNumber   Message5Type = "number"
	Message5TypeBoolean  Message5Type = "boolean"
	Message5TypeMapOfAny Message5Type = "mapOfAny"
)

type Message5 struct {
	Str      *string        `queryParam:"inline,name=five"`
	Number   *float64       `queryParam:"inline,name=five"`
	Boolean  *bool          `queryParam:"inline,name=five"`
	MapOfAny map[string]any `queryParam:"inline,name=five"`

	Type Message5Type
}

var _ error = &Message5{}

func CreateMessage5Str(str string) Message5 {
	typ := Message5TypeStr

	return Message5{
		Str:  &str,
		Type: typ,
	}
}

func CreateMessage5Number(number float64) Message5 {
	typ := Message5TypeNumber

	return Message5{
		Number: &number,
		Type:   typ,
	}
}

func CreateMessage5Boolean(boolean bool) Message5 {
	typ := Message5TypeBoolean

	return Message5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateMessage5MapOfAny(mapOfAny map[string]any) Message5 {
	typ := Message5TypeMapOfAny

	return Message5{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *Message5) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = Message5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = Message5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = Message5TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = Message5TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Message5", string(data))
}

func (u Message5) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Message5: all fields are null")
}

func (u Message5) Error() string {
	switch u.Type {
	case Message5TypeStr:
		data, _ := json.Marshal(u.Str)
		return string(data)
	case Message5TypeNumber:
		data, _ := json.Marshal(u.Number)
		return string(data)
	case Message5TypeBoolean:
		data, _ := json.Marshal(u.Boolean)
		return string(data)
	case Message5TypeMapOfAny:
		data, _ := json.Marshal(u.MapOfAny)
		return string(data)
	default:
		return "unknown error"
	}
}

type Message4 struct {
}

func (m Message4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *Message4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

type ValidationErrorDtoMessageType string

const (
	ValidationErrorDtoMessageTypeStr             ValidationErrorDtoMessageType = "str"
	ValidationErrorDtoMessageTypeNumber          ValidationErrorDtoMessageType = "number"
	ValidationErrorDtoMessageTypeBoolean         ValidationErrorDtoMessageType = "boolean"
	ValidationErrorDtoMessageTypeMessage4        ValidationErrorDtoMessageType = "message_4"
	ValidationErrorDtoMessageTypeArrayOfMessage5 ValidationErrorDtoMessageType = "arrayOfMessage5"
)

// ValidationErrorDtoMessage - Value that failed validation
type ValidationErrorDtoMessage struct {
	Str             *string     `queryParam:"inline,name=message"`
	Number          *float64    `queryParam:"inline,name=message"`
	Boolean         *bool       `queryParam:"inline,name=message"`
	Message4        *Message4   `queryParam:"inline,name=message"`
	ArrayOfMessage5 []*Message5 `queryParam:"inline,name=message"`

	Type ValidationErrorDtoMessageType
}

var _ error = &ValidationErrorDtoMessage{}

func CreateValidationErrorDtoMessageStr(str string) ValidationErrorDtoMessage {
	typ := ValidationErrorDtoMessageTypeStr

	return ValidationErrorDtoMessage{
		Str:  &str,
		Type: typ,
	}
}

func CreateValidationErrorDtoMessageNumber(number float64) ValidationErrorDtoMessage {
	typ := ValidationErrorDtoMessageTypeNumber

	return ValidationErrorDtoMessage{
		Number: &number,
		Type:   typ,
	}
}

func CreateValidationErrorDtoMessageBoolean(boolean bool) ValidationErrorDtoMessage {
	typ := ValidationErrorDtoMessageTypeBoolean

	return ValidationErrorDtoMessage{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValidationErrorDtoMessageMessage4(message4 Message4) ValidationErrorDtoMessage {
	typ := ValidationErrorDtoMessageTypeMessage4

	return ValidationErrorDtoMessage{
		Message4: &message4,
		Type:     typ,
	}
}

func CreateValidationErrorDtoMessageArrayOfMessage5(arrayOfMessage5 []*Message5) ValidationErrorDtoMessage {
	typ := ValidationErrorDtoMessageTypeArrayOfMessage5

	return ValidationErrorDtoMessage{
		ArrayOfMessage5: arrayOfMessage5,
		Type:            typ,
	}
}

func (u *ValidationErrorDtoMessage) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ValidationErrorDtoMessageTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = ValidationErrorDtoMessageTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = ValidationErrorDtoMessageTypeBoolean
		return nil
	}

	var message4 Message4 = Message4{}
	if err := utils.UnmarshalJSON(data, &message4, "", true, nil); err == nil {
		u.Message4 = &message4
		u.Type = ValidationErrorDtoMessageTypeMessage4
		return nil
	}

	var arrayOfMessage5 []*Message5 = []*Message5{}
	if err := utils.UnmarshalJSON(data, &arrayOfMessage5, "", true, nil); err == nil {
		u.ArrayOfMessage5 = arrayOfMessage5
		u.Type = ValidationErrorDtoMessageTypeArrayOfMessage5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ValidationErrorDtoMessage", string(data))
}

func (u ValidationErrorDtoMessage) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Message4 != nil {
		return utils.MarshalJSON(u.Message4, "", true)
	}

	if u.ArrayOfMessage5 != nil {
		return utils.MarshalJSON(u.ArrayOfMessage5, "", true)
	}

	return nil, errors.New("could not marshal union type ValidationErrorDtoMessage: all fields are null")
}

func (u ValidationErrorDtoMessage) Error() string {
	switch u.Type {
	case ValidationErrorDtoMessageTypeStr:
		data, _ := json.Marshal(u.Str)
		return string(data)
	case ValidationErrorDtoMessageTypeNumber:
		data, _ := json.Marshal(u.Number)
		return string(data)
	case ValidationErrorDtoMessageTypeBoolean:
		data, _ := json.Marshal(u.Boolean)
		return string(data)
	case ValidationErrorDtoMessageTypeMessage4:
		data, _ := json.Marshal(u.Message4)
		return string(data)
	case ValidationErrorDtoMessageTypeArrayOfMessage5:
		data, _ := json.Marshal(u.ArrayOfMessage5)
		return string(data)
	default:
		return "unknown error"
	}
}

type ValidationErrorDto struct {
	// HTTP status code of the error response.
	StatusCode float64 `json:"statusCode"`
	// Timestamp of when the error occurred.
	Timestamp string `json:"timestamp"`
	// The path where the error occurred.
	Path string `json:"path"`
	// Value that failed validation
	Message *ValidationErrorDtoMessage `json:"message,omitempty"`
	// Optional context object for additional error details.
	Ctx map[string]any `json:"ctx,omitempty"`
	// Optional unique identifier for the error, useful for tracking using Sentry and
	//       New Relic, only available for 500.
	ErrorID *string `json:"errorId,omitempty"`
	// A record of validation errors keyed by field name
	Errors map[string]components.ConstraintValidation `json:"errors"`
}

var _ error = &ValidationErrorDto{}

func (e *ValidationErrorDto) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
