// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/novuhq/novu-go/internal/utils"
	"github.com/novuhq/novu-go/models/components"
)

type MessagePayloadValidationExceptionDto5Type string

const (
	MessagePayloadValidationExceptionDto5TypeStr      MessagePayloadValidationExceptionDto5Type = "str"
	MessagePayloadValidationExceptionDto5TypeNumber   MessagePayloadValidationExceptionDto5Type = "number"
	MessagePayloadValidationExceptionDto5TypeBoolean  MessagePayloadValidationExceptionDto5Type = "boolean"
	MessagePayloadValidationExceptionDto5TypeMapOfAny MessagePayloadValidationExceptionDto5Type = "mapOfAny"
)

type MessagePayloadValidationExceptionDto5 struct {
	Str      *string        `queryParam:"inline" name:"five"`
	Number   *float64       `queryParam:"inline" name:"five"`
	Boolean  *bool          `queryParam:"inline" name:"five"`
	MapOfAny map[string]any `queryParam:"inline" name:"five"`

	Type MessagePayloadValidationExceptionDto5Type
}

var _ error = &MessagePayloadValidationExceptionDto5{}

func CreateMessagePayloadValidationExceptionDto5Str(str string) MessagePayloadValidationExceptionDto5 {
	typ := MessagePayloadValidationExceptionDto5TypeStr

	return MessagePayloadValidationExceptionDto5{
		Str:  &str,
		Type: typ,
	}
}

func CreateMessagePayloadValidationExceptionDto5Number(number float64) MessagePayloadValidationExceptionDto5 {
	typ := MessagePayloadValidationExceptionDto5TypeNumber

	return MessagePayloadValidationExceptionDto5{
		Number: &number,
		Type:   typ,
	}
}

func CreateMessagePayloadValidationExceptionDto5Boolean(boolean bool) MessagePayloadValidationExceptionDto5 {
	typ := MessagePayloadValidationExceptionDto5TypeBoolean

	return MessagePayloadValidationExceptionDto5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateMessagePayloadValidationExceptionDto5MapOfAny(mapOfAny map[string]any) MessagePayloadValidationExceptionDto5 {
	typ := MessagePayloadValidationExceptionDto5TypeMapOfAny

	return MessagePayloadValidationExceptionDto5{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *MessagePayloadValidationExceptionDto5) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = MessagePayloadValidationExceptionDto5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = MessagePayloadValidationExceptionDto5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = MessagePayloadValidationExceptionDto5TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = MessagePayloadValidationExceptionDto5TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MessagePayloadValidationExceptionDto5", string(data))
}

func (u MessagePayloadValidationExceptionDto5) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type MessagePayloadValidationExceptionDto5: all fields are null")
}

func (u MessagePayloadValidationExceptionDto5) Error() string {
	switch u.Type {
	case MessagePayloadValidationExceptionDto5TypeStr:
		data, _ := json.Marshal(u.Str)
		return string(data)
	case MessagePayloadValidationExceptionDto5TypeNumber:
		data, _ := json.Marshal(u.Number)
		return string(data)
	case MessagePayloadValidationExceptionDto5TypeBoolean:
		data, _ := json.Marshal(u.Boolean)
		return string(data)
	case MessagePayloadValidationExceptionDto5TypeMapOfAny:
		data, _ := json.Marshal(u.MapOfAny)
		return string(data)
	default:
		return "unknown error"
	}
}

type MessagePayloadValidationExceptionDto4 struct {
}

func (m MessagePayloadValidationExceptionDto4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MessagePayloadValidationExceptionDto4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

type PayloadValidationExceptionDtoMessageType string

const (
	PayloadValidationExceptionDtoMessageTypeStr                                          PayloadValidationExceptionDtoMessageType = "str"
	PayloadValidationExceptionDtoMessageTypeNumber                                       PayloadValidationExceptionDtoMessageType = "number"
	PayloadValidationExceptionDtoMessageTypeBoolean                                      PayloadValidationExceptionDtoMessageType = "boolean"
	PayloadValidationExceptionDtoMessageTypeMessagePayloadValidationExceptionDto4        PayloadValidationExceptionDtoMessageType = "message_PayloadValidationExceptionDto_4"
	PayloadValidationExceptionDtoMessageTypeArrayOfMessagePayloadValidationExceptionDto5 PayloadValidationExceptionDtoMessageType = "arrayOfMessagePayloadValidationExceptionDto5"
)

// PayloadValidationExceptionDtoMessage - Value that failed validation
type PayloadValidationExceptionDtoMessage struct {
	Str                                          *string                                  `queryParam:"inline" name:"message"`
	Number                                       *float64                                 `queryParam:"inline" name:"message"`
	Boolean                                      *bool                                    `queryParam:"inline" name:"message"`
	MessagePayloadValidationExceptionDto4        *MessagePayloadValidationExceptionDto4   `queryParam:"inline" name:"message"`
	ArrayOfMessagePayloadValidationExceptionDto5 []*MessagePayloadValidationExceptionDto5 `queryParam:"inline" name:"message"`

	Type PayloadValidationExceptionDtoMessageType
}

var _ error = &PayloadValidationExceptionDtoMessage{}

func CreatePayloadValidationExceptionDtoMessageStr(str string) PayloadValidationExceptionDtoMessage {
	typ := PayloadValidationExceptionDtoMessageTypeStr

	return PayloadValidationExceptionDtoMessage{
		Str:  &str,
		Type: typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageNumber(number float64) PayloadValidationExceptionDtoMessage {
	typ := PayloadValidationExceptionDtoMessageTypeNumber

	return PayloadValidationExceptionDtoMessage{
		Number: &number,
		Type:   typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageBoolean(boolean bool) PayloadValidationExceptionDtoMessage {
	typ := PayloadValidationExceptionDtoMessageTypeBoolean

	return PayloadValidationExceptionDtoMessage{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageMessagePayloadValidationExceptionDto4(messagePayloadValidationExceptionDto4 MessagePayloadValidationExceptionDto4) PayloadValidationExceptionDtoMessage {
	typ := PayloadValidationExceptionDtoMessageTypeMessagePayloadValidationExceptionDto4

	return PayloadValidationExceptionDtoMessage{
		MessagePayloadValidationExceptionDto4: &messagePayloadValidationExceptionDto4,
		Type:                                  typ,
	}
}

func CreatePayloadValidationExceptionDtoMessageArrayOfMessagePayloadValidationExceptionDto5(arrayOfMessagePayloadValidationExceptionDto5 []*MessagePayloadValidationExceptionDto5) PayloadValidationExceptionDtoMessage {
	typ := PayloadValidationExceptionDtoMessageTypeArrayOfMessagePayloadValidationExceptionDto5

	return PayloadValidationExceptionDtoMessage{
		ArrayOfMessagePayloadValidationExceptionDto5: arrayOfMessagePayloadValidationExceptionDto5,
		Type: typ,
	}
}

func (u *PayloadValidationExceptionDtoMessage) UnmarshalJSON(data []byte) error {

	var messagePayloadValidationExceptionDto4 MessagePayloadValidationExceptionDto4 = MessagePayloadValidationExceptionDto4{}
	if err := utils.UnmarshalJSON(data, &messagePayloadValidationExceptionDto4, "", true, nil); err == nil {
		u.MessagePayloadValidationExceptionDto4 = &messagePayloadValidationExceptionDto4
		u.Type = PayloadValidationExceptionDtoMessageTypeMessagePayloadValidationExceptionDto4
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = PayloadValidationExceptionDtoMessageTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = PayloadValidationExceptionDtoMessageTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = PayloadValidationExceptionDtoMessageTypeBoolean
		return nil
	}

	var arrayOfMessagePayloadValidationExceptionDto5 []*MessagePayloadValidationExceptionDto5 = []*MessagePayloadValidationExceptionDto5{}
	if err := utils.UnmarshalJSON(data, &arrayOfMessagePayloadValidationExceptionDto5, "", true, nil); err == nil {
		u.ArrayOfMessagePayloadValidationExceptionDto5 = arrayOfMessagePayloadValidationExceptionDto5
		u.Type = PayloadValidationExceptionDtoMessageTypeArrayOfMessagePayloadValidationExceptionDto5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadValidationExceptionDtoMessage", string(data))
}

func (u PayloadValidationExceptionDtoMessage) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MessagePayloadValidationExceptionDto4 != nil {
		return utils.MarshalJSON(u.MessagePayloadValidationExceptionDto4, "", true)
	}

	if u.ArrayOfMessagePayloadValidationExceptionDto5 != nil {
		return utils.MarshalJSON(u.ArrayOfMessagePayloadValidationExceptionDto5, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadValidationExceptionDtoMessage: all fields are null")
}

func (u PayloadValidationExceptionDtoMessage) Error() string {
	switch u.Type {
	case PayloadValidationExceptionDtoMessageTypeStr:
		data, _ := json.Marshal(u.Str)
		return string(data)
	case PayloadValidationExceptionDtoMessageTypeNumber:
		data, _ := json.Marshal(u.Number)
		return string(data)
	case PayloadValidationExceptionDtoMessageTypeBoolean:
		data, _ := json.Marshal(u.Boolean)
		return string(data)
	case PayloadValidationExceptionDtoMessageTypeMessagePayloadValidationExceptionDto4:
		data, _ := json.Marshal(u.MessagePayloadValidationExceptionDto4)
		return string(data)
	case PayloadValidationExceptionDtoMessageTypeArrayOfMessagePayloadValidationExceptionDto5:
		data, _ := json.Marshal(u.ArrayOfMessagePayloadValidationExceptionDto5)
		return string(data)
	default:
		return "unknown error"
	}
}

// Schema - The JSON schema that was used for validation
type Schema struct {
}

type PayloadValidationExceptionDto struct {
	// HTTP status code of the error response.
	StatusCode float64 `json:"statusCode"`
	// Timestamp of when the error occurred.
	Timestamp string `json:"timestamp"`
	// The path where the error occurred.
	Path string `json:"path"`
	// Value that failed validation
	Message *PayloadValidationExceptionDtoMessage `json:"message,omitempty"`
	// Optional context object for additional error details.
	Ctx map[string]any `json:"ctx,omitempty"`
	// Optional unique identifier for the error, useful for tracking using Sentry and
	//       New Relic, only available for 500.
	ErrorID *string `json:"errorId,omitempty"`
	// Type identifier for payload validation errors
	Type string `json:"type"`
	// Array of detailed validation errors
	Errors []components.PayloadValidationErrorDto `json:"errors"`
	// The JSON schema that was used for validation
	Schema *Schema `json:"schema,omitempty"`
}

var _ error = &PayloadValidationExceptionDto{}

func (e *PayloadValidationExceptionDto) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
